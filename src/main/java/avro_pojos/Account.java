/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro_pojos;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class Account extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1651093201951139727L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Account\",\"namespace\":\"com.sephora.dataplatform.avro\",\"fields\":[{\"name\":\"is_merged_with_anonymous_by_card\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"is_anonymous\",\"type\":\"boolean\",\"default\":false},{\"name\":\"group_id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"usa_id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"card_numbers\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":[]},\"default\":[]},{\"name\":\"historical_group_ids\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":[]},\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Account> ENCODER =
      new BinaryMessageEncoder<Account>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Account> DECODER =
      new BinaryMessageDecoder<Account>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Account> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Account> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Account> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Account>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Account to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Account from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Account instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Account fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public String is_merged_with_anonymous_by_card;
  @Deprecated public boolean is_anonymous;
  @Deprecated public String group_id;
  @Deprecated public String usa_id;
  @Deprecated public java.util.List<String> card_numbers;
  @Deprecated public java.util.List<String> historical_group_ids;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Account() {}

  /**
   * All-args constructor.
   * @param is_merged_with_anonymous_by_card The new value for is_merged_with_anonymous_by_card
   * @param is_anonymous The new value for is_anonymous
   * @param group_id The new value for group_id
   * @param usa_id The new value for usa_id
   * @param card_numbers The new value for card_numbers
   * @param historical_group_ids The new value for historical_group_ids
   */
  public Account(String is_merged_with_anonymous_by_card, Boolean is_anonymous, String group_id, String usa_id, java.util.List<String> card_numbers, java.util.List<String> historical_group_ids) {
    this.is_merged_with_anonymous_by_card = is_merged_with_anonymous_by_card;
    this.is_anonymous = is_anonymous;
    this.group_id = group_id;
    this.usa_id = usa_id;
    this.card_numbers = card_numbers;
    this.historical_group_ids = historical_group_ids;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return is_merged_with_anonymous_by_card;
    case 1: return is_anonymous;
    case 2: return group_id;
    case 3: return usa_id;
    case 4: return card_numbers;
    case 5: return historical_group_ids;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: is_merged_with_anonymous_by_card = value$ != null ? value$.toString() : null; break;
    case 1: is_anonymous = (Boolean)value$; break;
    case 2: group_id = value$ != null ? value$.toString() : null; break;
    case 3: usa_id = value$ != null ? value$.toString() : null; break;
    case 4: card_numbers = (java.util.List<String>)value$; break;
    case 5: historical_group_ids = (java.util.List<String>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'is_merged_with_anonymous_by_card' field.
   * @return The value of the 'is_merged_with_anonymous_by_card' field.
   */
  public String getIsMergedWithAnonymousByCard() {
    return is_merged_with_anonymous_by_card;
  }


  /**
   * Sets the value of the 'is_merged_with_anonymous_by_card' field.
   * @param value the value to set.
   */
  public void setIsMergedWithAnonymousByCard(String value) {
    this.is_merged_with_anonymous_by_card = value;
  }

  /**
   * Gets the value of the 'is_anonymous' field.
   * @return The value of the 'is_anonymous' field.
   */
  public boolean getIsAnonymous() {
    return is_anonymous;
  }


  /**
   * Sets the value of the 'is_anonymous' field.
   * @param value the value to set.
   */
  public void setIsAnonymous(boolean value) {
    this.is_anonymous = value;
  }

  /**
   * Gets the value of the 'group_id' field.
   * @return The value of the 'group_id' field.
   */
  public String getGroupId() {
    return group_id;
  }


  /**
   * Sets the value of the 'group_id' field.
   * @param value the value to set.
   */
  public void setGroupId(String value) {
    this.group_id = value;
  }

  /**
   * Gets the value of the 'usa_id' field.
   * @return The value of the 'usa_id' field.
   */
  public String getUsaId() {
    return usa_id;
  }


  /**
   * Sets the value of the 'usa_id' field.
   * @param value the value to set.
   */
  public void setUsaId(String value) {
    this.usa_id = value;
  }

  /**
   * Gets the value of the 'card_numbers' field.
   * @return The value of the 'card_numbers' field.
   */
  public java.util.List<String> getCardNumbers() {
    return card_numbers;
  }


  /**
   * Sets the value of the 'card_numbers' field.
   * @param value the value to set.
   */
  public void setCardNumbers(java.util.List<String> value) {
    this.card_numbers = value;
  }

  /**
   * Gets the value of the 'historical_group_ids' field.
   * @return The value of the 'historical_group_ids' field.
   */
  public java.util.List<String> getHistoricalGroupIds() {
    return historical_group_ids;
  }


  /**
   * Sets the value of the 'historical_group_ids' field.
   * @param value the value to set.
   */
  public void setHistoricalGroupIds(java.util.List<String> value) {
    this.historical_group_ids = value;
  }

  /**
   * Creates a new Account RecordBuilder.
   * @return A new Account RecordBuilder
   */
  public static Account.Builder newBuilder() {
    return new Account.Builder();
  }

  /**
   * Creates a new Account RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Account RecordBuilder
   */
  public static Account.Builder newBuilder(Account.Builder other) {
    if (other == null) {
      return new Account.Builder();
    } else {
      return new Account.Builder(other);
    }
  }

  /**
   * Creates a new Account RecordBuilder by copying an existing Account instance.
   * @param other The existing instance to copy.
   * @return A new Account RecordBuilder
   */
  public static Account.Builder newBuilder(Account other) {
    if (other == null) {
      return new Account.Builder();
    } else {
      return new Account.Builder(other);
    }
  }

  /**
   * RecordBuilder for Account instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Account>
    implements org.apache.avro.data.RecordBuilder<Account> {

    private String is_merged_with_anonymous_by_card;
    private boolean is_anonymous;
    private String group_id;
    private String usa_id;
    private java.util.List<String> card_numbers;
    private java.util.List<String> historical_group_ids;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Account.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.is_merged_with_anonymous_by_card)) {
        this.is_merged_with_anonymous_by_card = data().deepCopy(fields()[0].schema(), other.is_merged_with_anonymous_by_card);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.is_anonymous)) {
        this.is_anonymous = data().deepCopy(fields()[1].schema(), other.is_anonymous);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.group_id)) {
        this.group_id = data().deepCopy(fields()[2].schema(), other.group_id);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.usa_id)) {
        this.usa_id = data().deepCopy(fields()[3].schema(), other.usa_id);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.card_numbers)) {
        this.card_numbers = data().deepCopy(fields()[4].schema(), other.card_numbers);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.historical_group_ids)) {
        this.historical_group_ids = data().deepCopy(fields()[5].schema(), other.historical_group_ids);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Account instance
     * @param other The existing instance to copy.
     */
    private Builder(Account other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.is_merged_with_anonymous_by_card)) {
        this.is_merged_with_anonymous_by_card = data().deepCopy(fields()[0].schema(), other.is_merged_with_anonymous_by_card);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.is_anonymous)) {
        this.is_anonymous = data().deepCopy(fields()[1].schema(), other.is_anonymous);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.group_id)) {
        this.group_id = data().deepCopy(fields()[2].schema(), other.group_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.usa_id)) {
        this.usa_id = data().deepCopy(fields()[3].schema(), other.usa_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.card_numbers)) {
        this.card_numbers = data().deepCopy(fields()[4].schema(), other.card_numbers);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.historical_group_ids)) {
        this.historical_group_ids = data().deepCopy(fields()[5].schema(), other.historical_group_ids);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'is_merged_with_anonymous_by_card' field.
      * @return The value.
      */
    public String getIsMergedWithAnonymousByCard() {
      return is_merged_with_anonymous_by_card;
    }


    /**
      * Sets the value of the 'is_merged_with_anonymous_by_card' field.
      * @param value The value of 'is_merged_with_anonymous_by_card'.
      * @return This builder.
      */
    public Account.Builder setIsMergedWithAnonymousByCard(String value) {
      validate(fields()[0], value);
      this.is_merged_with_anonymous_by_card = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'is_merged_with_anonymous_by_card' field has been set.
      * @return True if the 'is_merged_with_anonymous_by_card' field has been set, false otherwise.
      */
    public boolean hasIsMergedWithAnonymousByCard() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'is_merged_with_anonymous_by_card' field.
      * @return This builder.
      */
    public Account.Builder clearIsMergedWithAnonymousByCard() {
      is_merged_with_anonymous_by_card = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'is_anonymous' field.
      * @return The value.
      */
    public boolean getIsAnonymous() {
      return is_anonymous;
    }


    /**
      * Sets the value of the 'is_anonymous' field.
      * @param value The value of 'is_anonymous'.
      * @return This builder.
      */
    public Account.Builder setIsAnonymous(boolean value) {
      validate(fields()[1], value);
      this.is_anonymous = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'is_anonymous' field has been set.
      * @return True if the 'is_anonymous' field has been set, false otherwise.
      */
    public boolean hasIsAnonymous() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'is_anonymous' field.
      * @return This builder.
      */
    public Account.Builder clearIsAnonymous() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'group_id' field.
      * @return The value.
      */
    public String getGroupId() {
      return group_id;
    }


    /**
      * Sets the value of the 'group_id' field.
      * @param value The value of 'group_id'.
      * @return This builder.
      */
    public Account.Builder setGroupId(String value) {
      validate(fields()[2], value);
      this.group_id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'group_id' field has been set.
      * @return True if the 'group_id' field has been set, false otherwise.
      */
    public boolean hasGroupId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'group_id' field.
      * @return This builder.
      */
    public Account.Builder clearGroupId() {
      group_id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'usa_id' field.
      * @return The value.
      */
    public String getUsaId() {
      return usa_id;
    }


    /**
      * Sets the value of the 'usa_id' field.
      * @param value The value of 'usa_id'.
      * @return This builder.
      */
    public Account.Builder setUsaId(String value) {
      validate(fields()[3], value);
      this.usa_id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'usa_id' field has been set.
      * @return True if the 'usa_id' field has been set, false otherwise.
      */
    public boolean hasUsaId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'usa_id' field.
      * @return This builder.
      */
    public Account.Builder clearUsaId() {
      usa_id = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'card_numbers' field.
      * @return The value.
      */
    public java.util.List<String> getCardNumbers() {
      return card_numbers;
    }


    /**
      * Sets the value of the 'card_numbers' field.
      * @param value The value of 'card_numbers'.
      * @return This builder.
      */
    public Account.Builder setCardNumbers(java.util.List<String> value) {
      validate(fields()[4], value);
      this.card_numbers = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'card_numbers' field has been set.
      * @return True if the 'card_numbers' field has been set, false otherwise.
      */
    public boolean hasCardNumbers() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'card_numbers' field.
      * @return This builder.
      */
    public Account.Builder clearCardNumbers() {
      card_numbers = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'historical_group_ids' field.
      * @return The value.
      */
    public java.util.List<String> getHistoricalGroupIds() {
      return historical_group_ids;
    }


    /**
      * Sets the value of the 'historical_group_ids' field.
      * @param value The value of 'historical_group_ids'.
      * @return This builder.
      */
    public Account.Builder setHistoricalGroupIds(java.util.List<String> value) {
      validate(fields()[5], value);
      this.historical_group_ids = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'historical_group_ids' field has been set.
      * @return True if the 'historical_group_ids' field has been set, false otherwise.
      */
    public boolean hasHistoricalGroupIds() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'historical_group_ids' field.
      * @return This builder.
      */
    public Account.Builder clearHistoricalGroupIds() {
      historical_group_ids = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Account build() {
      try {
        Account record = new Account();
        record.is_merged_with_anonymous_by_card = fieldSetFlags()[0] ? this.is_merged_with_anonymous_by_card : (String) defaultValue(fields()[0]);
        record.is_anonymous = fieldSetFlags()[1] ? this.is_anonymous : (Boolean) defaultValue(fields()[1]);
        record.group_id = fieldSetFlags()[2] ? this.group_id : (String) defaultValue(fields()[2]);
        record.usa_id = fieldSetFlags()[3] ? this.usa_id : (String) defaultValue(fields()[3]);
        record.card_numbers = fieldSetFlags()[4] ? this.card_numbers : (java.util.List<String>) defaultValue(fields()[4]);
        record.historical_group_ids = fieldSetFlags()[5] ? this.historical_group_ids : (java.util.List<String>) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Account>
    WRITER$ = (org.apache.avro.io.DatumWriter<Account>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Account>
    READER$ = (org.apache.avro.io.DatumReader<Account>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.is_merged_with_anonymous_by_card == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.is_merged_with_anonymous_by_card);
    }

    out.writeBoolean(this.is_anonymous);

    if (this.group_id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.group_id);
    }

    if (this.usa_id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.usa_id);
    }

    long size0 = this.card_numbers.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (String e0: this.card_numbers) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.historical_group_ids.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (String e1: this.historical_group_ids) {
      actualSize1++;
      out.startItem();
      out.writeString(e1);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.is_merged_with_anonymous_by_card = null;
      } else {
        this.is_merged_with_anonymous_by_card = in.readString();
      }

      this.is_anonymous = in.readBoolean();

      if (in.readIndex() != 1) {
        in.readNull();
        this.group_id = null;
      } else {
        this.group_id = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.usa_id = null;
      } else {
        this.usa_id = in.readString();
      }

      long size0 = in.readArrayStart();
      java.util.List<String> a0 = this.card_numbers;
      if (a0 == null) {
        a0 = new SpecificData.Array<String>((int)size0, SCHEMA$.getField("card_numbers").schema());
        this.card_numbers = a0;
      } else a0.clear();
      SpecificData.Array<String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<String>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          String e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString();
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<String> a1 = this.historical_group_ids;
      if (a1 == null) {
        a1 = new SpecificData.Array<String>((int)size1, SCHEMA$.getField("historical_group_ids").schema());
        this.historical_group_ids = a1;
      } else a1.clear();
      SpecificData.Array<String> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<String>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          String e1 = (ga1 != null ? ga1.peek() : null);
          e1 = in.readString();
          a1.add(e1);
        }
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.is_merged_with_anonymous_by_card = null;
          } else {
            this.is_merged_with_anonymous_by_card = in.readString();
          }
          break;

        case 1:
          this.is_anonymous = in.readBoolean();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.group_id = null;
          } else {
            this.group_id = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.usa_id = null;
          } else {
            this.usa_id = in.readString();
          }
          break;

        case 4:
          long size0 = in.readArrayStart();
          java.util.List<String> a0 = this.card_numbers;
          if (a0 == null) {
            a0 = new SpecificData.Array<String>((int)size0, SCHEMA$.getField("card_numbers").schema());
            this.card_numbers = a0;
          } else a0.clear();
          SpecificData.Array<String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<String>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              String e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString();
              a0.add(e0);
            }
          }
          break;

        case 5:
          long size1 = in.readArrayStart();
          java.util.List<String> a1 = this.historical_group_ids;
          if (a1 == null) {
            a1 = new SpecificData.Array<String>((int)size1, SCHEMA$.getField("historical_group_ids").schema());
            this.historical_group_ids = a1;
          } else a1.clear();
          SpecificData.Array<String> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<String>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              String e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readString();
              a1.add(e1);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










