/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro_pojos;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CustomerTransactions extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8803873402410211721L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CustomerTransactions\",\"namespace\":\"com.sephora.dataplatform.avro\",\"fields\":[{\"name\":\"usa_id\",\"type\":[\"null\",\"long\"],\"doc\":\"bi_id\",\"default\":null},{\"name\":\"card_numbers\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":[]}],\"default\":null},{\"name\":\"reason_text\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"the reason why the current return has such return_auth_flag\",\"default\":null},{\"name\":\"cust_sale_counter\",\"type\":\"int\",\"doc\":\"cust_sale_counter field\"},{\"name\":\"created_date\",\"type\":\"long\",\"doc\":\"created_date field\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CustomerTransactions> ENCODER =
      new BinaryMessageEncoder<CustomerTransactions>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CustomerTransactions> DECODER =
      new BinaryMessageDecoder<CustomerTransactions>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<CustomerTransactions> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<CustomerTransactions> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CustomerTransactions>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this CustomerTransactions to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a CustomerTransactions from a ByteBuffer. */
  public static CustomerTransactions fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** bi_id */
  @Deprecated public Long usa_id;
  @Deprecated public java.util.List<CharSequence> card_numbers;
  /** the reason why the current return has such return_auth_flag */
  @Deprecated public CharSequence reason_text;
  /** cust_sale_counter field */
  @Deprecated public int cust_sale_counter;
  /** created_date field */
  @Deprecated public long created_date;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CustomerTransactions() {}

  /**
   * All-args constructor.
   * @param usa_id bi_id
   * @param card_numbers The new value for card_numbers
   * @param reason_text the reason why the current return has such return_auth_flag
   * @param cust_sale_counter cust_sale_counter field
   * @param created_date created_date field
   */
  public CustomerTransactions(Long usa_id, java.util.List<CharSequence> card_numbers, CharSequence reason_text, Integer cust_sale_counter, Long created_date) {
    this.usa_id = usa_id;
    this.card_numbers = card_numbers;
    this.reason_text = reason_text;
    this.cust_sale_counter = cust_sale_counter;
    this.created_date = created_date;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return usa_id;
    case 1: return card_numbers;
    case 2: return reason_text;
    case 3: return cust_sale_counter;
    case 4: return created_date;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: usa_id = (Long)value$; break;
    case 1: card_numbers = (java.util.List<CharSequence>)value$; break;
    case 2: reason_text = (CharSequence)value$; break;
    case 3: cust_sale_counter = (Integer)value$; break;
    case 4: created_date = (Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'usa_id' field.
   * @return bi_id
   */
  public Long getUsaId() {
    return usa_id;
  }

  /**
   * Sets the value of the 'usa_id' field.
   * bi_id
   * @param value the value to set.
   */
  public void setUsaId(Long value) {
    this.usa_id = value;
  }

  /**
   * Gets the value of the 'card_numbers' field.
   * @return The value of the 'card_numbers' field.
   */
  public java.util.List<CharSequence> getCardNumbers() {
    return card_numbers;
  }

  /**
   * Sets the value of the 'card_numbers' field.
   * @param value the value to set.
   */
  public void setCardNumbers(java.util.List<CharSequence> value) {
    this.card_numbers = value;
  }

  /**
   * Gets the value of the 'reason_text' field.
   * @return the reason why the current return has such return_auth_flag
   */
  public CharSequence getReasonText() {
    return reason_text;
  }

  /**
   * Sets the value of the 'reason_text' field.
   * the reason why the current return has such return_auth_flag
   * @param value the value to set.
   */
  public void setReasonText(CharSequence value) {
    this.reason_text = value;
  }

  /**
   * Gets the value of the 'cust_sale_counter' field.
   * @return cust_sale_counter field
   */
  public Integer getCustSaleCounter() {
    return cust_sale_counter;
  }

  /**
   * Sets the value of the 'cust_sale_counter' field.
   * cust_sale_counter field
   * @param value the value to set.
   */
  public void setCustSaleCounter(Integer value) {
    this.cust_sale_counter = value;
  }

  /**
   * Gets the value of the 'created_date' field.
   * @return created_date field
   */
  public Long getCreatedDate() {
    return created_date;
  }

  /**
   * Sets the value of the 'created_date' field.
   * created_date field
   * @param value the value to set.
   */
  public void setCreatedDate(Long value) {
    this.created_date = value;
  }

  /**
   * Creates a new CustomerTransactions RecordBuilder.
   * @return A new CustomerTransactions RecordBuilder
   */
  public static CustomerTransactions.Builder newBuilder() {
    return new CustomerTransactions.Builder();
  }

  /**
   * Creates a new CustomerTransactions RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CustomerTransactions RecordBuilder
   */
  public static CustomerTransactions.Builder newBuilder(CustomerTransactions.Builder other) {
    return new CustomerTransactions.Builder(other);
  }

  /**
   * Creates a new CustomerTransactions RecordBuilder by copying an existing CustomerTransactions instance.
   * @param other The existing instance to copy.
   * @return A new CustomerTransactions RecordBuilder
   */
  public static CustomerTransactions.Builder newBuilder(CustomerTransactions other) {
    return new CustomerTransactions.Builder(other);
  }

  /**
   * RecordBuilder for CustomerTransactions instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CustomerTransactions>
    implements org.apache.avro.data.RecordBuilder<CustomerTransactions> {

    /** bi_id */
    private Long usa_id;
    private java.util.List<CharSequence> card_numbers;
    /** the reason why the current return has such return_auth_flag */
    private CharSequence reason_text;
    /** cust_sale_counter field */
    private int cust_sale_counter;
    /** created_date field */
    private long created_date;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(CustomerTransactions.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.usa_id)) {
        this.usa_id = data().deepCopy(fields()[0].schema(), other.usa_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.card_numbers)) {
        this.card_numbers = data().deepCopy(fields()[1].schema(), other.card_numbers);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.reason_text)) {
        this.reason_text = data().deepCopy(fields()[2].schema(), other.reason_text);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cust_sale_counter)) {
        this.cust_sale_counter = data().deepCopy(fields()[3].schema(), other.cust_sale_counter);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.created_date)) {
        this.created_date = data().deepCopy(fields()[4].schema(), other.created_date);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CustomerTransactions instance
     * @param other The existing instance to copy.
     */
    private Builder(CustomerTransactions other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.usa_id)) {
        this.usa_id = data().deepCopy(fields()[0].schema(), other.usa_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.card_numbers)) {
        this.card_numbers = data().deepCopy(fields()[1].schema(), other.card_numbers);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.reason_text)) {
        this.reason_text = data().deepCopy(fields()[2].schema(), other.reason_text);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cust_sale_counter)) {
        this.cust_sale_counter = data().deepCopy(fields()[3].schema(), other.cust_sale_counter);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.created_date)) {
        this.created_date = data().deepCopy(fields()[4].schema(), other.created_date);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'usa_id' field.
      * bi_id
      * @return The value.
      */
    public Long getUsaId() {
      return usa_id;
    }

    /**
      * Sets the value of the 'usa_id' field.
      * bi_id
      * @param value The value of 'usa_id'.
      * @return This builder.
      */
    public CustomerTransactions.Builder setUsaId(Long value) {
      validate(fields()[0], value);
      this.usa_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'usa_id' field has been set.
      * bi_id
      * @return True if the 'usa_id' field has been set, false otherwise.
      */
    public boolean hasUsaId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'usa_id' field.
      * bi_id
      * @return This builder.
      */
    public CustomerTransactions.Builder clearUsaId() {
      usa_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'card_numbers' field.
      * @return The value.
      */
    public java.util.List<CharSequence> getCardNumbers() {
      return card_numbers;
    }

    /**
      * Sets the value of the 'card_numbers' field.
      * @param value The value of 'card_numbers'.
      * @return This builder.
      */
    public CustomerTransactions.Builder setCardNumbers(java.util.List<CharSequence> value) {
      validate(fields()[1], value);
      this.card_numbers = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'card_numbers' field has been set.
      * @return True if the 'card_numbers' field has been set, false otherwise.
      */
    public boolean hasCardNumbers() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'card_numbers' field.
      * @return This builder.
      */
    public CustomerTransactions.Builder clearCardNumbers() {
      card_numbers = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'reason_text' field.
      * the reason why the current return has such return_auth_flag
      * @return The value.
      */
    public CharSequence getReasonText() {
      return reason_text;
    }

    /**
      * Sets the value of the 'reason_text' field.
      * the reason why the current return has such return_auth_flag
      * @param value The value of 'reason_text'.
      * @return This builder.
      */
    public CustomerTransactions.Builder setReasonText(CharSequence value) {
      validate(fields()[2], value);
      this.reason_text = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'reason_text' field has been set.
      * the reason why the current return has such return_auth_flag
      * @return True if the 'reason_text' field has been set, false otherwise.
      */
    public boolean hasReasonText() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'reason_text' field.
      * the reason why the current return has such return_auth_flag
      * @return This builder.
      */
    public CustomerTransactions.Builder clearReasonText() {
      reason_text = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'cust_sale_counter' field.
      * cust_sale_counter field
      * @return The value.
      */
    public Integer getCustSaleCounter() {
      return cust_sale_counter;
    }

    /**
      * Sets the value of the 'cust_sale_counter' field.
      * cust_sale_counter field
      * @param value The value of 'cust_sale_counter'.
      * @return This builder.
      */
    public CustomerTransactions.Builder setCustSaleCounter(int value) {
      validate(fields()[3], value);
      this.cust_sale_counter = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'cust_sale_counter' field has been set.
      * cust_sale_counter field
      * @return True if the 'cust_sale_counter' field has been set, false otherwise.
      */
    public boolean hasCustSaleCounter() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'cust_sale_counter' field.
      * cust_sale_counter field
      * @return This builder.
      */
    public CustomerTransactions.Builder clearCustSaleCounter() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'created_date' field.
      * created_date field
      * @return The value.
      */
    public Long getCreatedDate() {
      return created_date;
    }

    /**
      * Sets the value of the 'created_date' field.
      * created_date field
      * @param value The value of 'created_date'.
      * @return This builder.
      */
    public CustomerTransactions.Builder setCreatedDate(long value) {
      validate(fields()[4], value);
      this.created_date = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'created_date' field has been set.
      * created_date field
      * @return True if the 'created_date' field has been set, false otherwise.
      */
    public boolean hasCreatedDate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'created_date' field.
      * created_date field
      * @return This builder.
      */
    public CustomerTransactions.Builder clearCreatedDate() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CustomerTransactions build() {
      try {
        CustomerTransactions record = new CustomerTransactions();
        record.usa_id = fieldSetFlags()[0] ? this.usa_id : (Long) defaultValue(fields()[0]);
        record.card_numbers = fieldSetFlags()[1] ? this.card_numbers : (java.util.List<CharSequence>) defaultValue(fields()[1]);
        record.reason_text = fieldSetFlags()[2] ? this.reason_text : (CharSequence) defaultValue(fields()[2]);
        record.cust_sale_counter = fieldSetFlags()[3] ? this.cust_sale_counter : (Integer) defaultValue(fields()[3]);
        record.created_date = fieldSetFlags()[4] ? this.created_date : (Long) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CustomerTransactions>
    WRITER$ = (org.apache.avro.io.DatumWriter<CustomerTransactions>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CustomerTransactions>
    READER$ = (org.apache.avro.io.DatumReader<CustomerTransactions>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
