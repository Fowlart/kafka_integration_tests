/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro_pojos;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class AnonymousCardsByGroupId extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -9184078556216300245L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AnonymousCardsByGroupId\",\"namespace\":\"com.sephora.dataplatform.avro\",\"fields\":[{\"name\":\"group_id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"card_numbers\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":[]},\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AnonymousCardsByGroupId> ENCODER =
      new BinaryMessageEncoder<AnonymousCardsByGroupId>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AnonymousCardsByGroupId> DECODER =
      new BinaryMessageDecoder<AnonymousCardsByGroupId>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AnonymousCardsByGroupId> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AnonymousCardsByGroupId> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AnonymousCardsByGroupId> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AnonymousCardsByGroupId>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AnonymousCardsByGroupId to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AnonymousCardsByGroupId from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AnonymousCardsByGroupId instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AnonymousCardsByGroupId fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public String group_id;
  @Deprecated public java.util.List<String> card_numbers;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AnonymousCardsByGroupId() {}

  /**
   * All-args constructor.
   * @param group_id The new value for group_id
   * @param card_numbers The new value for card_numbers
   */
  public AnonymousCardsByGroupId(String group_id, java.util.List<String> card_numbers) {
    this.group_id = group_id;
    this.card_numbers = card_numbers;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return group_id;
    case 1: return card_numbers;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: group_id = value$ != null ? value$.toString() : null; break;
    case 1: card_numbers = (java.util.List<String>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'group_id' field.
   * @return The value of the 'group_id' field.
   */
  public String getGroupId() {
    return group_id;
  }


  /**
   * Sets the value of the 'group_id' field.
   * @param value the value to set.
   */
  public void setGroupId(String value) {
    this.group_id = value;
  }

  /**
   * Gets the value of the 'card_numbers' field.
   * @return The value of the 'card_numbers' field.
   */
  public java.util.List<String> getCardNumbers() {
    return card_numbers;
  }


  /**
   * Sets the value of the 'card_numbers' field.
   * @param value the value to set.
   */
  public void setCardNumbers(java.util.List<String> value) {
    this.card_numbers = value;
  }

  /**
   * Creates a new AnonymousCardsByGroupId RecordBuilder.
   * @return A new AnonymousCardsByGroupId RecordBuilder
   */
  public static AnonymousCardsByGroupId.Builder newBuilder() {
    return new AnonymousCardsByGroupId.Builder();
  }

  /**
   * Creates a new AnonymousCardsByGroupId RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AnonymousCardsByGroupId RecordBuilder
   */
  public static AnonymousCardsByGroupId.Builder newBuilder(AnonymousCardsByGroupId.Builder other) {
    if (other == null) {
      return new AnonymousCardsByGroupId.Builder();
    } else {
      return new AnonymousCardsByGroupId.Builder(other);
    }
  }

  /**
   * Creates a new AnonymousCardsByGroupId RecordBuilder by copying an existing AnonymousCardsByGroupId instance.
   * @param other The existing instance to copy.
   * @return A new AnonymousCardsByGroupId RecordBuilder
   */
  public static AnonymousCardsByGroupId.Builder newBuilder(AnonymousCardsByGroupId other) {
    if (other == null) {
      return new AnonymousCardsByGroupId.Builder();
    } else {
      return new AnonymousCardsByGroupId.Builder(other);
    }
  }

  /**
   * RecordBuilder for AnonymousCardsByGroupId instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AnonymousCardsByGroupId>
    implements org.apache.avro.data.RecordBuilder<AnonymousCardsByGroupId> {

    private String group_id;
    private java.util.List<String> card_numbers;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(AnonymousCardsByGroupId.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.group_id)) {
        this.group_id = data().deepCopy(fields()[0].schema(), other.group_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.card_numbers)) {
        this.card_numbers = data().deepCopy(fields()[1].schema(), other.card_numbers);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing AnonymousCardsByGroupId instance
     * @param other The existing instance to copy.
     */
    private Builder(AnonymousCardsByGroupId other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.group_id)) {
        this.group_id = data().deepCopy(fields()[0].schema(), other.group_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.card_numbers)) {
        this.card_numbers = data().deepCopy(fields()[1].schema(), other.card_numbers);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'group_id' field.
      * @return The value.
      */
    public String getGroupId() {
      return group_id;
    }


    /**
      * Sets the value of the 'group_id' field.
      * @param value The value of 'group_id'.
      * @return This builder.
      */
    public AnonymousCardsByGroupId.Builder setGroupId(String value) {
      validate(fields()[0], value);
      this.group_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'group_id' field has been set.
      * @return True if the 'group_id' field has been set, false otherwise.
      */
    public boolean hasGroupId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'group_id' field.
      * @return This builder.
      */
    public AnonymousCardsByGroupId.Builder clearGroupId() {
      group_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'card_numbers' field.
      * @return The value.
      */
    public java.util.List<String> getCardNumbers() {
      return card_numbers;
    }


    /**
      * Sets the value of the 'card_numbers' field.
      * @param value The value of 'card_numbers'.
      * @return This builder.
      */
    public AnonymousCardsByGroupId.Builder setCardNumbers(java.util.List<String> value) {
      validate(fields()[1], value);
      this.card_numbers = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'card_numbers' field has been set.
      * @return True if the 'card_numbers' field has been set, false otherwise.
      */
    public boolean hasCardNumbers() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'card_numbers' field.
      * @return This builder.
      */
    public AnonymousCardsByGroupId.Builder clearCardNumbers() {
      card_numbers = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AnonymousCardsByGroupId build() {
      try {
        AnonymousCardsByGroupId record = new AnonymousCardsByGroupId();
        record.group_id = fieldSetFlags()[0] ? this.group_id : (String) defaultValue(fields()[0]);
        record.card_numbers = fieldSetFlags()[1] ? this.card_numbers : (java.util.List<String>) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AnonymousCardsByGroupId>
    WRITER$ = (org.apache.avro.io.DatumWriter<AnonymousCardsByGroupId>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AnonymousCardsByGroupId>
    READER$ = (org.apache.avro.io.DatumReader<AnonymousCardsByGroupId>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.group_id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.group_id);
    }

    long size0 = this.card_numbers.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (String e0: this.card_numbers) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.group_id = null;
      } else {
        this.group_id = in.readString();
      }

      long size0 = in.readArrayStart();
      java.util.List<String> a0 = this.card_numbers;
      if (a0 == null) {
        a0 = new SpecificData.Array<String>((int)size0, SCHEMA$.getField("card_numbers").schema());
        this.card_numbers = a0;
      } else a0.clear();
      SpecificData.Array<String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<String>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          String e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString();
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.group_id = null;
          } else {
            this.group_id = in.readString();
          }
          break;

        case 1:
          long size0 = in.readArrayStart();
          java.util.List<String> a0 = this.card_numbers;
          if (a0 == null) {
            a0 = new SpecificData.Array<String>((int)size0, SCHEMA$.getField("card_numbers").schema());
            this.card_numbers = a0;
          } else a0.clear();
          SpecificData.Array<String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<String>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              String e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString();
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










