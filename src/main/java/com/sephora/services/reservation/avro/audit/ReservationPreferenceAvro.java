/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.sephora.services.reservation.avro.audit;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ReservationPreferenceAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8856306463222418824L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ReservationPreferenceAvro\",\"namespace\":\"com.sephora.services.reservation.avro.audit\",\"fields\":[{\"name\":\"reservationPrefId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"reservationPrefName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"reservationPrefValue\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"reservationPrefType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ReservationPreferenceAvro> ENCODER =
      new BinaryMessageEncoder<ReservationPreferenceAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ReservationPreferenceAvro> DECODER =
      new BinaryMessageDecoder<ReservationPreferenceAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ReservationPreferenceAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ReservationPreferenceAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ReservationPreferenceAvro>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ReservationPreferenceAvro to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ReservationPreferenceAvro from a ByteBuffer. */
  public static ReservationPreferenceAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public CharSequence reservationPrefId;
  @Deprecated public CharSequence reservationPrefName;
  @Deprecated public CharSequence reservationPrefValue;
  @Deprecated public CharSequence reservationPrefType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ReservationPreferenceAvro() {}

  /**
   * All-args constructor.
   * @param reservationPrefId The new value for reservationPrefId
   * @param reservationPrefName The new value for reservationPrefName
   * @param reservationPrefValue The new value for reservationPrefValue
   * @param reservationPrefType The new value for reservationPrefType
   */
  public ReservationPreferenceAvro(CharSequence reservationPrefId, CharSequence reservationPrefName, CharSequence reservationPrefValue, CharSequence reservationPrefType) {
    this.reservationPrefId = reservationPrefId;
    this.reservationPrefName = reservationPrefName;
    this.reservationPrefValue = reservationPrefValue;
    this.reservationPrefType = reservationPrefType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return reservationPrefId;
    case 1: return reservationPrefName;
    case 2: return reservationPrefValue;
    case 3: return reservationPrefType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: reservationPrefId = (CharSequence)value$; break;
    case 1: reservationPrefName = (CharSequence)value$; break;
    case 2: reservationPrefValue = (CharSequence)value$; break;
    case 3: reservationPrefType = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'reservationPrefId' field.
   * @return The value of the 'reservationPrefId' field.
   */
  public CharSequence getReservationPrefId() {
    return reservationPrefId;
  }

  /**
   * Sets the value of the 'reservationPrefId' field.
   * @param value the value to set.
   */
  public void setReservationPrefId(CharSequence value) {
    this.reservationPrefId = value;
  }

  /**
   * Gets the value of the 'reservationPrefName' field.
   * @return The value of the 'reservationPrefName' field.
   */
  public CharSequence getReservationPrefName() {
    return reservationPrefName;
  }

  /**
   * Sets the value of the 'reservationPrefName' field.
   * @param value the value to set.
   */
  public void setReservationPrefName(CharSequence value) {
    this.reservationPrefName = value;
  }

  /**
   * Gets the value of the 'reservationPrefValue' field.
   * @return The value of the 'reservationPrefValue' field.
   */
  public CharSequence getReservationPrefValue() {
    return reservationPrefValue;
  }

  /**
   * Sets the value of the 'reservationPrefValue' field.
   * @param value the value to set.
   */
  public void setReservationPrefValue(CharSequence value) {
    this.reservationPrefValue = value;
  }

  /**
   * Gets the value of the 'reservationPrefType' field.
   * @return The value of the 'reservationPrefType' field.
   */
  public CharSequence getReservationPrefType() {
    return reservationPrefType;
  }

  /**
   * Sets the value of the 'reservationPrefType' field.
   * @param value the value to set.
   */
  public void setReservationPrefType(CharSequence value) {
    this.reservationPrefType = value;
  }

  /**
   * Creates a new ReservationPreferenceAvro RecordBuilder.
   * @return A new ReservationPreferenceAvro RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new ReservationPreferenceAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ReservationPreferenceAvro RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new ReservationPreferenceAvro RecordBuilder by copying an existing ReservationPreferenceAvro instance.
   * @param other The existing instance to copy.
   * @return A new ReservationPreferenceAvro RecordBuilder
   */
  public static Builder newBuilder(ReservationPreferenceAvro other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for ReservationPreferenceAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ReservationPreferenceAvro>
    implements org.apache.avro.data.RecordBuilder<ReservationPreferenceAvro> {

    private CharSequence reservationPrefId;
    private CharSequence reservationPrefName;
    private CharSequence reservationPrefValue;
    private CharSequence reservationPrefType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.reservationPrefId)) {
        this.reservationPrefId = data().deepCopy(fields()[0].schema(), other.reservationPrefId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.reservationPrefName)) {
        this.reservationPrefName = data().deepCopy(fields()[1].schema(), other.reservationPrefName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.reservationPrefValue)) {
        this.reservationPrefValue = data().deepCopy(fields()[2].schema(), other.reservationPrefValue);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.reservationPrefType)) {
        this.reservationPrefType = data().deepCopy(fields()[3].schema(), other.reservationPrefType);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ReservationPreferenceAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(ReservationPreferenceAvro other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.reservationPrefId)) {
        this.reservationPrefId = data().deepCopy(fields()[0].schema(), other.reservationPrefId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.reservationPrefName)) {
        this.reservationPrefName = data().deepCopy(fields()[1].schema(), other.reservationPrefName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.reservationPrefValue)) {
        this.reservationPrefValue = data().deepCopy(fields()[2].schema(), other.reservationPrefValue);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.reservationPrefType)) {
        this.reservationPrefType = data().deepCopy(fields()[3].schema(), other.reservationPrefType);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'reservationPrefId' field.
      * @return The value.
      */
    public CharSequence getReservationPrefId() {
      return reservationPrefId;
    }

    /**
      * Sets the value of the 'reservationPrefId' field.
      * @param value The value of 'reservationPrefId'.
      * @return This builder.
      */
    public Builder setReservationPrefId(CharSequence value) {
      validate(fields()[0], value);
      this.reservationPrefId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'reservationPrefId' field has been set.
      * @return True if the 'reservationPrefId' field has been set, false otherwise.
      */
    public boolean hasReservationPrefId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'reservationPrefId' field.
      * @return This builder.
      */
    public Builder clearReservationPrefId() {
      reservationPrefId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'reservationPrefName' field.
      * @return The value.
      */
    public CharSequence getReservationPrefName() {
      return reservationPrefName;
    }

    /**
      * Sets the value of the 'reservationPrefName' field.
      * @param value The value of 'reservationPrefName'.
      * @return This builder.
      */
    public Builder setReservationPrefName(CharSequence value) {
      validate(fields()[1], value);
      this.reservationPrefName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'reservationPrefName' field has been set.
      * @return True if the 'reservationPrefName' field has been set, false otherwise.
      */
    public boolean hasReservationPrefName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'reservationPrefName' field.
      * @return This builder.
      */
    public Builder clearReservationPrefName() {
      reservationPrefName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'reservationPrefValue' field.
      * @return The value.
      */
    public CharSequence getReservationPrefValue() {
      return reservationPrefValue;
    }

    /**
      * Sets the value of the 'reservationPrefValue' field.
      * @param value The value of 'reservationPrefValue'.
      * @return This builder.
      */
    public Builder setReservationPrefValue(CharSequence value) {
      validate(fields()[2], value);
      this.reservationPrefValue = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'reservationPrefValue' field has been set.
      * @return True if the 'reservationPrefValue' field has been set, false otherwise.
      */
    public boolean hasReservationPrefValue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'reservationPrefValue' field.
      * @return This builder.
      */
    public Builder clearReservationPrefValue() {
      reservationPrefValue = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'reservationPrefType' field.
      * @return The value.
      */
    public CharSequence getReservationPrefType() {
      return reservationPrefType;
    }

    /**
      * Sets the value of the 'reservationPrefType' field.
      * @param value The value of 'reservationPrefType'.
      * @return This builder.
      */
    public Builder setReservationPrefType(CharSequence value) {
      validate(fields()[3], value);
      this.reservationPrefType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'reservationPrefType' field has been set.
      * @return True if the 'reservationPrefType' field has been set, false otherwise.
      */
    public boolean hasReservationPrefType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'reservationPrefType' field.
      * @return This builder.
      */
    public Builder clearReservationPrefType() {
      reservationPrefType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ReservationPreferenceAvro build() {
      try {
        ReservationPreferenceAvro record = new ReservationPreferenceAvro();
        record.reservationPrefId = fieldSetFlags()[0] ? this.reservationPrefId : (CharSequence) defaultValue(fields()[0]);
        record.reservationPrefName = fieldSetFlags()[1] ? this.reservationPrefName : (CharSequence) defaultValue(fields()[1]);
        record.reservationPrefValue = fieldSetFlags()[2] ? this.reservationPrefValue : (CharSequence) defaultValue(fields()[2]);
        record.reservationPrefType = fieldSetFlags()[3] ? this.reservationPrefType : (CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ReservationPreferenceAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<ReservationPreferenceAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ReservationPreferenceAvro>
    READER$ = (org.apache.avro.io.DatumReader<ReservationPreferenceAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
