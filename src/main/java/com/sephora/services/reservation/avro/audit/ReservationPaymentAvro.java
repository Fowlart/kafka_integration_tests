/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.sephora.services.reservation.avro.audit;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ReservationPaymentAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3419823969193509095L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ReservationPaymentAvro\",\"namespace\":\"com.sephora.services.reservation.avro.audit\",\"fields\":[{\"name\":\"paymentMethodId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"paymentMethod\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"paymentReferenceNo\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"paymentTransactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"paymentCaptureDateTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"paymentAuthDateTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"paymentAuthAmount\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"paymentCaptureAmount\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ReservationPaymentAvro> ENCODER =
      new BinaryMessageEncoder<ReservationPaymentAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ReservationPaymentAvro> DECODER =
      new BinaryMessageDecoder<ReservationPaymentAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ReservationPaymentAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ReservationPaymentAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ReservationPaymentAvro>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ReservationPaymentAvro to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ReservationPaymentAvro from a ByteBuffer. */
  public static ReservationPaymentAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public CharSequence paymentMethodId;
  @Deprecated public CharSequence paymentMethod;
  @Deprecated public CharSequence paymentReferenceNo;
  @Deprecated public CharSequence paymentTransactionId;
  @Deprecated public CharSequence paymentCaptureDateTime;
  @Deprecated public CharSequence paymentAuthDateTime;
  @Deprecated public CharSequence paymentAuthAmount;
  @Deprecated public CharSequence paymentCaptureAmount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ReservationPaymentAvro() {}

  /**
   * All-args constructor.
   * @param paymentMethodId The new value for paymentMethodId
   * @param paymentMethod The new value for paymentMethod
   * @param paymentReferenceNo The new value for paymentReferenceNo
   * @param paymentTransactionId The new value for paymentTransactionId
   * @param paymentCaptureDateTime The new value for paymentCaptureDateTime
   * @param paymentAuthDateTime The new value for paymentAuthDateTime
   * @param paymentAuthAmount The new value for paymentAuthAmount
   * @param paymentCaptureAmount The new value for paymentCaptureAmount
   */
  public ReservationPaymentAvro(CharSequence paymentMethodId, CharSequence paymentMethod, CharSequence paymentReferenceNo, CharSequence paymentTransactionId, CharSequence paymentCaptureDateTime, CharSequence paymentAuthDateTime, CharSequence paymentAuthAmount, CharSequence paymentCaptureAmount) {
    this.paymentMethodId = paymentMethodId;
    this.paymentMethod = paymentMethod;
    this.paymentReferenceNo = paymentReferenceNo;
    this.paymentTransactionId = paymentTransactionId;
    this.paymentCaptureDateTime = paymentCaptureDateTime;
    this.paymentAuthDateTime = paymentAuthDateTime;
    this.paymentAuthAmount = paymentAuthAmount;
    this.paymentCaptureAmount = paymentCaptureAmount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return paymentMethodId;
    case 1: return paymentMethod;
    case 2: return paymentReferenceNo;
    case 3: return paymentTransactionId;
    case 4: return paymentCaptureDateTime;
    case 5: return paymentAuthDateTime;
    case 6: return paymentAuthAmount;
    case 7: return paymentCaptureAmount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: paymentMethodId = (CharSequence)value$; break;
    case 1: paymentMethod = (CharSequence)value$; break;
    case 2: paymentReferenceNo = (CharSequence)value$; break;
    case 3: paymentTransactionId = (CharSequence)value$; break;
    case 4: paymentCaptureDateTime = (CharSequence)value$; break;
    case 5: paymentAuthDateTime = (CharSequence)value$; break;
    case 6: paymentAuthAmount = (CharSequence)value$; break;
    case 7: paymentCaptureAmount = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'paymentMethodId' field.
   * @return The value of the 'paymentMethodId' field.
   */
  public CharSequence getPaymentMethodId() {
    return paymentMethodId;
  }

  /**
   * Sets the value of the 'paymentMethodId' field.
   * @param value the value to set.
   */
  public void setPaymentMethodId(CharSequence value) {
    this.paymentMethodId = value;
  }

  /**
   * Gets the value of the 'paymentMethod' field.
   * @return The value of the 'paymentMethod' field.
   */
  public CharSequence getPaymentMethod() {
    return paymentMethod;
  }

  /**
   * Sets the value of the 'paymentMethod' field.
   * @param value the value to set.
   */
  public void setPaymentMethod(CharSequence value) {
    this.paymentMethod = value;
  }

  /**
   * Gets the value of the 'paymentReferenceNo' field.
   * @return The value of the 'paymentReferenceNo' field.
   */
  public CharSequence getPaymentReferenceNo() {
    return paymentReferenceNo;
  }

  /**
   * Sets the value of the 'paymentReferenceNo' field.
   * @param value the value to set.
   */
  public void setPaymentReferenceNo(CharSequence value) {
    this.paymentReferenceNo = value;
  }

  /**
   * Gets the value of the 'paymentTransactionId' field.
   * @return The value of the 'paymentTransactionId' field.
   */
  public CharSequence getPaymentTransactionId() {
    return paymentTransactionId;
  }

  /**
   * Sets the value of the 'paymentTransactionId' field.
   * @param value the value to set.
   */
  public void setPaymentTransactionId(CharSequence value) {
    this.paymentTransactionId = value;
  }

  /**
   * Gets the value of the 'paymentCaptureDateTime' field.
   * @return The value of the 'paymentCaptureDateTime' field.
   */
  public CharSequence getPaymentCaptureDateTime() {
    return paymentCaptureDateTime;
  }

  /**
   * Sets the value of the 'paymentCaptureDateTime' field.
   * @param value the value to set.
   */
  public void setPaymentCaptureDateTime(CharSequence value) {
    this.paymentCaptureDateTime = value;
  }

  /**
   * Gets the value of the 'paymentAuthDateTime' field.
   * @return The value of the 'paymentAuthDateTime' field.
   */
  public CharSequence getPaymentAuthDateTime() {
    return paymentAuthDateTime;
  }

  /**
   * Sets the value of the 'paymentAuthDateTime' field.
   * @param value the value to set.
   */
  public void setPaymentAuthDateTime(CharSequence value) {
    this.paymentAuthDateTime = value;
  }

  /**
   * Gets the value of the 'paymentAuthAmount' field.
   * @return The value of the 'paymentAuthAmount' field.
   */
  public CharSequence getPaymentAuthAmount() {
    return paymentAuthAmount;
  }

  /**
   * Sets the value of the 'paymentAuthAmount' field.
   * @param value the value to set.
   */
  public void setPaymentAuthAmount(CharSequence value) {
    this.paymentAuthAmount = value;
  }

  /**
   * Gets the value of the 'paymentCaptureAmount' field.
   * @return The value of the 'paymentCaptureAmount' field.
   */
  public CharSequence getPaymentCaptureAmount() {
    return paymentCaptureAmount;
  }

  /**
   * Sets the value of the 'paymentCaptureAmount' field.
   * @param value the value to set.
   */
  public void setPaymentCaptureAmount(CharSequence value) {
    this.paymentCaptureAmount = value;
  }

  /**
   * Creates a new ReservationPaymentAvro RecordBuilder.
   * @return A new ReservationPaymentAvro RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new ReservationPaymentAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ReservationPaymentAvro RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new ReservationPaymentAvro RecordBuilder by copying an existing ReservationPaymentAvro instance.
   * @param other The existing instance to copy.
   * @return A new ReservationPaymentAvro RecordBuilder
   */
  public static Builder newBuilder(ReservationPaymentAvro other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for ReservationPaymentAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ReservationPaymentAvro>
    implements org.apache.avro.data.RecordBuilder<ReservationPaymentAvro> {

    private CharSequence paymentMethodId;
    private CharSequence paymentMethod;
    private CharSequence paymentReferenceNo;
    private CharSequence paymentTransactionId;
    private CharSequence paymentCaptureDateTime;
    private CharSequence paymentAuthDateTime;
    private CharSequence paymentAuthAmount;
    private CharSequence paymentCaptureAmount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.paymentMethodId)) {
        this.paymentMethodId = data().deepCopy(fields()[0].schema(), other.paymentMethodId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.paymentMethod)) {
        this.paymentMethod = data().deepCopy(fields()[1].schema(), other.paymentMethod);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.paymentReferenceNo)) {
        this.paymentReferenceNo = data().deepCopy(fields()[2].schema(), other.paymentReferenceNo);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.paymentTransactionId)) {
        this.paymentTransactionId = data().deepCopy(fields()[3].schema(), other.paymentTransactionId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.paymentCaptureDateTime)) {
        this.paymentCaptureDateTime = data().deepCopy(fields()[4].schema(), other.paymentCaptureDateTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.paymentAuthDateTime)) {
        this.paymentAuthDateTime = data().deepCopy(fields()[5].schema(), other.paymentAuthDateTime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.paymentAuthAmount)) {
        this.paymentAuthAmount = data().deepCopy(fields()[6].schema(), other.paymentAuthAmount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.paymentCaptureAmount)) {
        this.paymentCaptureAmount = data().deepCopy(fields()[7].schema(), other.paymentCaptureAmount);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ReservationPaymentAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(ReservationPaymentAvro other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.paymentMethodId)) {
        this.paymentMethodId = data().deepCopy(fields()[0].schema(), other.paymentMethodId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.paymentMethod)) {
        this.paymentMethod = data().deepCopy(fields()[1].schema(), other.paymentMethod);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.paymentReferenceNo)) {
        this.paymentReferenceNo = data().deepCopy(fields()[2].schema(), other.paymentReferenceNo);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.paymentTransactionId)) {
        this.paymentTransactionId = data().deepCopy(fields()[3].schema(), other.paymentTransactionId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.paymentCaptureDateTime)) {
        this.paymentCaptureDateTime = data().deepCopy(fields()[4].schema(), other.paymentCaptureDateTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.paymentAuthDateTime)) {
        this.paymentAuthDateTime = data().deepCopy(fields()[5].schema(), other.paymentAuthDateTime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.paymentAuthAmount)) {
        this.paymentAuthAmount = data().deepCopy(fields()[6].schema(), other.paymentAuthAmount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.paymentCaptureAmount)) {
        this.paymentCaptureAmount = data().deepCopy(fields()[7].schema(), other.paymentCaptureAmount);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'paymentMethodId' field.
      * @return The value.
      */
    public CharSequence getPaymentMethodId() {
      return paymentMethodId;
    }

    /**
      * Sets the value of the 'paymentMethodId' field.
      * @param value The value of 'paymentMethodId'.
      * @return This builder.
      */
    public Builder setPaymentMethodId(CharSequence value) {
      validate(fields()[0], value);
      this.paymentMethodId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentMethodId' field has been set.
      * @return True if the 'paymentMethodId' field has been set, false otherwise.
      */
    public boolean hasPaymentMethodId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'paymentMethodId' field.
      * @return This builder.
      */
    public Builder clearPaymentMethodId() {
      paymentMethodId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentMethod' field.
      * @return The value.
      */
    public CharSequence getPaymentMethod() {
      return paymentMethod;
    }

    /**
      * Sets the value of the 'paymentMethod' field.
      * @param value The value of 'paymentMethod'.
      * @return This builder.
      */
    public Builder setPaymentMethod(CharSequence value) {
      validate(fields()[1], value);
      this.paymentMethod = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentMethod' field has been set.
      * @return True if the 'paymentMethod' field has been set, false otherwise.
      */
    public boolean hasPaymentMethod() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'paymentMethod' field.
      * @return This builder.
      */
    public Builder clearPaymentMethod() {
      paymentMethod = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentReferenceNo' field.
      * @return The value.
      */
    public CharSequence getPaymentReferenceNo() {
      return paymentReferenceNo;
    }

    /**
      * Sets the value of the 'paymentReferenceNo' field.
      * @param value The value of 'paymentReferenceNo'.
      * @return This builder.
      */
    public Builder setPaymentReferenceNo(CharSequence value) {
      validate(fields()[2], value);
      this.paymentReferenceNo = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentReferenceNo' field has been set.
      * @return True if the 'paymentReferenceNo' field has been set, false otherwise.
      */
    public boolean hasPaymentReferenceNo() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'paymentReferenceNo' field.
      * @return This builder.
      */
    public Builder clearPaymentReferenceNo() {
      paymentReferenceNo = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentTransactionId' field.
      * @return The value.
      */
    public CharSequence getPaymentTransactionId() {
      return paymentTransactionId;
    }

    /**
      * Sets the value of the 'paymentTransactionId' field.
      * @param value The value of 'paymentTransactionId'.
      * @return This builder.
      */
    public Builder setPaymentTransactionId(CharSequence value) {
      validate(fields()[3], value);
      this.paymentTransactionId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentTransactionId' field has been set.
      * @return True if the 'paymentTransactionId' field has been set, false otherwise.
      */
    public boolean hasPaymentTransactionId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'paymentTransactionId' field.
      * @return This builder.
      */
    public Builder clearPaymentTransactionId() {
      paymentTransactionId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentCaptureDateTime' field.
      * @return The value.
      */
    public CharSequence getPaymentCaptureDateTime() {
      return paymentCaptureDateTime;
    }

    /**
      * Sets the value of the 'paymentCaptureDateTime' field.
      * @param value The value of 'paymentCaptureDateTime'.
      * @return This builder.
      */
    public Builder setPaymentCaptureDateTime(CharSequence value) {
      validate(fields()[4], value);
      this.paymentCaptureDateTime = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentCaptureDateTime' field has been set.
      * @return True if the 'paymentCaptureDateTime' field has been set, false otherwise.
      */
    public boolean hasPaymentCaptureDateTime() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'paymentCaptureDateTime' field.
      * @return This builder.
      */
    public Builder clearPaymentCaptureDateTime() {
      paymentCaptureDateTime = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentAuthDateTime' field.
      * @return The value.
      */
    public CharSequence getPaymentAuthDateTime() {
      return paymentAuthDateTime;
    }

    /**
      * Sets the value of the 'paymentAuthDateTime' field.
      * @param value The value of 'paymentAuthDateTime'.
      * @return This builder.
      */
    public Builder setPaymentAuthDateTime(CharSequence value) {
      validate(fields()[5], value);
      this.paymentAuthDateTime = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentAuthDateTime' field has been set.
      * @return True if the 'paymentAuthDateTime' field has been set, false otherwise.
      */
    public boolean hasPaymentAuthDateTime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'paymentAuthDateTime' field.
      * @return This builder.
      */
    public Builder clearPaymentAuthDateTime() {
      paymentAuthDateTime = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentAuthAmount' field.
      * @return The value.
      */
    public CharSequence getPaymentAuthAmount() {
      return paymentAuthAmount;
    }

    /**
      * Sets the value of the 'paymentAuthAmount' field.
      * @param value The value of 'paymentAuthAmount'.
      * @return This builder.
      */
    public Builder setPaymentAuthAmount(CharSequence value) {
      validate(fields()[6], value);
      this.paymentAuthAmount = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentAuthAmount' field has been set.
      * @return True if the 'paymentAuthAmount' field has been set, false otherwise.
      */
    public boolean hasPaymentAuthAmount() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'paymentAuthAmount' field.
      * @return This builder.
      */
    public Builder clearPaymentAuthAmount() {
      paymentAuthAmount = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentCaptureAmount' field.
      * @return The value.
      */
    public CharSequence getPaymentCaptureAmount() {
      return paymentCaptureAmount;
    }

    /**
      * Sets the value of the 'paymentCaptureAmount' field.
      * @param value The value of 'paymentCaptureAmount'.
      * @return This builder.
      */
    public Builder setPaymentCaptureAmount(CharSequence value) {
      validate(fields()[7], value);
      this.paymentCaptureAmount = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentCaptureAmount' field has been set.
      * @return True if the 'paymentCaptureAmount' field has been set, false otherwise.
      */
    public boolean hasPaymentCaptureAmount() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'paymentCaptureAmount' field.
      * @return This builder.
      */
    public Builder clearPaymentCaptureAmount() {
      paymentCaptureAmount = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ReservationPaymentAvro build() {
      try {
        ReservationPaymentAvro record = new ReservationPaymentAvro();
        record.paymentMethodId = fieldSetFlags()[0] ? this.paymentMethodId : (CharSequence) defaultValue(fields()[0]);
        record.paymentMethod = fieldSetFlags()[1] ? this.paymentMethod : (CharSequence) defaultValue(fields()[1]);
        record.paymentReferenceNo = fieldSetFlags()[2] ? this.paymentReferenceNo : (CharSequence) defaultValue(fields()[2]);
        record.paymentTransactionId = fieldSetFlags()[3] ? this.paymentTransactionId : (CharSequence) defaultValue(fields()[3]);
        record.paymentCaptureDateTime = fieldSetFlags()[4] ? this.paymentCaptureDateTime : (CharSequence) defaultValue(fields()[4]);
        record.paymentAuthDateTime = fieldSetFlags()[5] ? this.paymentAuthDateTime : (CharSequence) defaultValue(fields()[5]);
        record.paymentAuthAmount = fieldSetFlags()[6] ? this.paymentAuthAmount : (CharSequence) defaultValue(fields()[6]);
        record.paymentCaptureAmount = fieldSetFlags()[7] ? this.paymentCaptureAmount : (CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ReservationPaymentAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<ReservationPaymentAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ReservationPaymentAvro>
    READER$ = (org.apache.avro.io.DatumReader<ReservationPaymentAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
