/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.sephora.services.reservation.avro.audit;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ReservationPricingAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 953396120414996070L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ReservationPricingAvro\",\"namespace\":\"com.sephora.services.reservation.avro.audit\",\"fields\":[{\"name\":\"listPrice\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"taxes\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ReservationPricingTaxesAvro\",\"fields\":[{\"name\":\"goodsAndServicesTax\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"harmonizedSalesTax\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"provincialSalesTax\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"totalTax\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null},{\"name\":\"total\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"noShowCharge\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"currencyCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ReservationPricingAvro> ENCODER =
      new BinaryMessageEncoder<ReservationPricingAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ReservationPricingAvro> DECODER =
      new BinaryMessageDecoder<ReservationPricingAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ReservationPricingAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ReservationPricingAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ReservationPricingAvro>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ReservationPricingAvro to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ReservationPricingAvro from a ByteBuffer. */
  public static ReservationPricingAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public CharSequence listPrice;
  @Deprecated public ReservationPricingTaxesAvro taxes;
  @Deprecated public CharSequence total;
  @Deprecated public Double noShowCharge;
  @Deprecated public CharSequence currencyCode;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ReservationPricingAvro() {}

  /**
   * All-args constructor.
   * @param listPrice The new value for listPrice
   * @param taxes The new value for taxes
   * @param total The new value for total
   * @param noShowCharge The new value for noShowCharge
   * @param currencyCode The new value for currencyCode
   */
  public ReservationPricingAvro(CharSequence listPrice, ReservationPricingTaxesAvro taxes, CharSequence total, Double noShowCharge, CharSequence currencyCode) {
    this.listPrice = listPrice;
    this.taxes = taxes;
    this.total = total;
    this.noShowCharge = noShowCharge;
    this.currencyCode = currencyCode;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return listPrice;
    case 1: return taxes;
    case 2: return total;
    case 3: return noShowCharge;
    case 4: return currencyCode;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: listPrice = (CharSequence)value$; break;
    case 1: taxes = (ReservationPricingTaxesAvro)value$; break;
    case 2: total = (CharSequence)value$; break;
    case 3: noShowCharge = (Double)value$; break;
    case 4: currencyCode = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'listPrice' field.
   * @return The value of the 'listPrice' field.
   */
  public CharSequence getListPrice() {
    return listPrice;
  }

  /**
   * Sets the value of the 'listPrice' field.
   * @param value the value to set.
   */
  public void setListPrice(CharSequence value) {
    this.listPrice = value;
  }

  /**
   * Gets the value of the 'taxes' field.
   * @return The value of the 'taxes' field.
   */
  public ReservationPricingTaxesAvro getTaxes() {
    return taxes;
  }

  /**
   * Sets the value of the 'taxes' field.
   * @param value the value to set.
   */
  public void setTaxes(ReservationPricingTaxesAvro value) {
    this.taxes = value;
  }

  /**
   * Gets the value of the 'total' field.
   * @return The value of the 'total' field.
   */
  public CharSequence getTotal() {
    return total;
  }

  /**
   * Sets the value of the 'total' field.
   * @param value the value to set.
   */
  public void setTotal(CharSequence value) {
    this.total = value;
  }

  /**
   * Gets the value of the 'noShowCharge' field.
   * @return The value of the 'noShowCharge' field.
   */
  public Double getNoShowCharge() {
    return noShowCharge;
  }

  /**
   * Sets the value of the 'noShowCharge' field.
   * @param value the value to set.
   */
  public void setNoShowCharge(Double value) {
    this.noShowCharge = value;
  }

  /**
   * Gets the value of the 'currencyCode' field.
   * @return The value of the 'currencyCode' field.
   */
  public CharSequence getCurrencyCode() {
    return currencyCode;
  }

  /**
   * Sets the value of the 'currencyCode' field.
   * @param value the value to set.
   */
  public void setCurrencyCode(CharSequence value) {
    this.currencyCode = value;
  }

  /**
   * Creates a new ReservationPricingAvro RecordBuilder.
   * @return A new ReservationPricingAvro RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new ReservationPricingAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ReservationPricingAvro RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new ReservationPricingAvro RecordBuilder by copying an existing ReservationPricingAvro instance.
   * @param other The existing instance to copy.
   * @return A new ReservationPricingAvro RecordBuilder
   */
  public static Builder newBuilder(ReservationPricingAvro other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for ReservationPricingAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ReservationPricingAvro>
    implements org.apache.avro.data.RecordBuilder<ReservationPricingAvro> {

    private CharSequence listPrice;
    private ReservationPricingTaxesAvro taxes;
    private ReservationPricingTaxesAvro.Builder taxesBuilder;
    private CharSequence total;
    private Double noShowCharge;
    private CharSequence currencyCode;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.listPrice)) {
        this.listPrice = data().deepCopy(fields()[0].schema(), other.listPrice);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.taxes)) {
        this.taxes = data().deepCopy(fields()[1].schema(), other.taxes);
        fieldSetFlags()[1] = true;
      }
      if (other.hasTaxesBuilder()) {
        this.taxesBuilder = ReservationPricingTaxesAvro.newBuilder(other.getTaxesBuilder());
      }
      if (isValidValue(fields()[2], other.total)) {
        this.total = data().deepCopy(fields()[2].schema(), other.total);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.noShowCharge)) {
        this.noShowCharge = data().deepCopy(fields()[3].schema(), other.noShowCharge);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.currencyCode)) {
        this.currencyCode = data().deepCopy(fields()[4].schema(), other.currencyCode);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ReservationPricingAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(ReservationPricingAvro other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.listPrice)) {
        this.listPrice = data().deepCopy(fields()[0].schema(), other.listPrice);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.taxes)) {
        this.taxes = data().deepCopy(fields()[1].schema(), other.taxes);
        fieldSetFlags()[1] = true;
      }
      this.taxesBuilder = null;
      if (isValidValue(fields()[2], other.total)) {
        this.total = data().deepCopy(fields()[2].schema(), other.total);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.noShowCharge)) {
        this.noShowCharge = data().deepCopy(fields()[3].schema(), other.noShowCharge);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.currencyCode)) {
        this.currencyCode = data().deepCopy(fields()[4].schema(), other.currencyCode);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'listPrice' field.
      * @return The value.
      */
    public CharSequence getListPrice() {
      return listPrice;
    }

    /**
      * Sets the value of the 'listPrice' field.
      * @param value The value of 'listPrice'.
      * @return This builder.
      */
    public Builder setListPrice(CharSequence value) {
      validate(fields()[0], value);
      this.listPrice = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'listPrice' field has been set.
      * @return True if the 'listPrice' field has been set, false otherwise.
      */
    public boolean hasListPrice() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'listPrice' field.
      * @return This builder.
      */
    public Builder clearListPrice() {
      listPrice = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'taxes' field.
      * @return The value.
      */
    public ReservationPricingTaxesAvro getTaxes() {
      return taxes;
    }

    /**
      * Sets the value of the 'taxes' field.
      * @param value The value of 'taxes'.
      * @return This builder.
      */
    public Builder setTaxes(ReservationPricingTaxesAvro value) {
      validate(fields()[1], value);
      this.taxesBuilder = null;
      this.taxes = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'taxes' field has been set.
      * @return True if the 'taxes' field has been set, false otherwise.
      */
    public boolean hasTaxes() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'taxes' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public ReservationPricingTaxesAvro.Builder getTaxesBuilder() {
      if (taxesBuilder == null) {
        if (hasTaxes()) {
          setTaxesBuilder(ReservationPricingTaxesAvro.newBuilder(taxes));
        } else {
          setTaxesBuilder(ReservationPricingTaxesAvro.newBuilder());
        }
      }
      return taxesBuilder;
    }

    /**
     * Sets the Builder instance for the 'taxes' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setTaxesBuilder(ReservationPricingTaxesAvro.Builder value) {
      clearTaxes();
      taxesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'taxes' field has an active Builder instance
     * @return True if the 'taxes' field has an active Builder instance
     */
    public boolean hasTaxesBuilder() {
      return taxesBuilder != null;
    }

    /**
      * Clears the value of the 'taxes' field.
      * @return This builder.
      */
    public Builder clearTaxes() {
      taxes = null;
      taxesBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'total' field.
      * @return The value.
      */
    public CharSequence getTotal() {
      return total;
    }

    /**
      * Sets the value of the 'total' field.
      * @param value The value of 'total'.
      * @return This builder.
      */
    public Builder setTotal(CharSequence value) {
      validate(fields()[2], value);
      this.total = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'total' field has been set.
      * @return True if the 'total' field has been set, false otherwise.
      */
    public boolean hasTotal() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'total' field.
      * @return This builder.
      */
    public Builder clearTotal() {
      total = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'noShowCharge' field.
      * @return The value.
      */
    public Double getNoShowCharge() {
      return noShowCharge;
    }

    /**
      * Sets the value of the 'noShowCharge' field.
      * @param value The value of 'noShowCharge'.
      * @return This builder.
      */
    public Builder setNoShowCharge(Double value) {
      validate(fields()[3], value);
      this.noShowCharge = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'noShowCharge' field has been set.
      * @return True if the 'noShowCharge' field has been set, false otherwise.
      */
    public boolean hasNoShowCharge() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'noShowCharge' field.
      * @return This builder.
      */
    public Builder clearNoShowCharge() {
      noShowCharge = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'currencyCode' field.
      * @return The value.
      */
    public CharSequence getCurrencyCode() {
      return currencyCode;
    }

    /**
      * Sets the value of the 'currencyCode' field.
      * @param value The value of 'currencyCode'.
      * @return This builder.
      */
    public Builder setCurrencyCode(CharSequence value) {
      validate(fields()[4], value);
      this.currencyCode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'currencyCode' field has been set.
      * @return True if the 'currencyCode' field has been set, false otherwise.
      */
    public boolean hasCurrencyCode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'currencyCode' field.
      * @return This builder.
      */
    public Builder clearCurrencyCode() {
      currencyCode = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ReservationPricingAvro build() {
      try {
        ReservationPricingAvro record = new ReservationPricingAvro();
        record.listPrice = fieldSetFlags()[0] ? this.listPrice : (CharSequence) defaultValue(fields()[0]);
        if (taxesBuilder != null) {
          record.taxes = this.taxesBuilder.build();
        } else {
          record.taxes = fieldSetFlags()[1] ? this.taxes : (ReservationPricingTaxesAvro) defaultValue(fields()[1]);
        }
        record.total = fieldSetFlags()[2] ? this.total : (CharSequence) defaultValue(fields()[2]);
        record.noShowCharge = fieldSetFlags()[3] ? this.noShowCharge : (Double) defaultValue(fields()[3]);
        record.currencyCode = fieldSetFlags()[4] ? this.currencyCode : (CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ReservationPricingAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<ReservationPricingAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ReservationPricingAvro>
    READER$ = (org.apache.avro.io.DatumReader<ReservationPricingAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
