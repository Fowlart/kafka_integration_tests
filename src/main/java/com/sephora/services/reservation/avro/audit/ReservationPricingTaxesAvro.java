/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.sephora.services.reservation.avro.audit;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ReservationPricingTaxesAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8395653174628476320L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ReservationPricingTaxesAvro\",\"namespace\":\"com.sephora.services.reservation.avro.audit\",\"fields\":[{\"name\":\"goodsAndServicesTax\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"harmonizedSalesTax\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"provincialSalesTax\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"totalTax\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ReservationPricingTaxesAvro> ENCODER =
      new BinaryMessageEncoder<ReservationPricingTaxesAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ReservationPricingTaxesAvro> DECODER =
      new BinaryMessageDecoder<ReservationPricingTaxesAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ReservationPricingTaxesAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ReservationPricingTaxesAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ReservationPricingTaxesAvro>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ReservationPricingTaxesAvro to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ReservationPricingTaxesAvro from a ByteBuffer. */
  public static ReservationPricingTaxesAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public CharSequence goodsAndServicesTax;
  @Deprecated public CharSequence harmonizedSalesTax;
  @Deprecated public CharSequence provincialSalesTax;
  @Deprecated public CharSequence totalTax;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ReservationPricingTaxesAvro() {}

  /**
   * All-args constructor.
   * @param goodsAndServicesTax The new value for goodsAndServicesTax
   * @param harmonizedSalesTax The new value for harmonizedSalesTax
   * @param provincialSalesTax The new value for provincialSalesTax
   * @param totalTax The new value for totalTax
   */
  public ReservationPricingTaxesAvro(CharSequence goodsAndServicesTax, CharSequence harmonizedSalesTax, CharSequence provincialSalesTax, CharSequence totalTax) {
    this.goodsAndServicesTax = goodsAndServicesTax;
    this.harmonizedSalesTax = harmonizedSalesTax;
    this.provincialSalesTax = provincialSalesTax;
    this.totalTax = totalTax;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return goodsAndServicesTax;
    case 1: return harmonizedSalesTax;
    case 2: return provincialSalesTax;
    case 3: return totalTax;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: goodsAndServicesTax = (CharSequence)value$; break;
    case 1: harmonizedSalesTax = (CharSequence)value$; break;
    case 2: provincialSalesTax = (CharSequence)value$; break;
    case 3: totalTax = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'goodsAndServicesTax' field.
   * @return The value of the 'goodsAndServicesTax' field.
   */
  public CharSequence getGoodsAndServicesTax() {
    return goodsAndServicesTax;
  }

  /**
   * Sets the value of the 'goodsAndServicesTax' field.
   * @param value the value to set.
   */
  public void setGoodsAndServicesTax(CharSequence value) {
    this.goodsAndServicesTax = value;
  }

  /**
   * Gets the value of the 'harmonizedSalesTax' field.
   * @return The value of the 'harmonizedSalesTax' field.
   */
  public CharSequence getHarmonizedSalesTax() {
    return harmonizedSalesTax;
  }

  /**
   * Sets the value of the 'harmonizedSalesTax' field.
   * @param value the value to set.
   */
  public void setHarmonizedSalesTax(CharSequence value) {
    this.harmonizedSalesTax = value;
  }

  /**
   * Gets the value of the 'provincialSalesTax' field.
   * @return The value of the 'provincialSalesTax' field.
   */
  public CharSequence getProvincialSalesTax() {
    return provincialSalesTax;
  }

  /**
   * Sets the value of the 'provincialSalesTax' field.
   * @param value the value to set.
   */
  public void setProvincialSalesTax(CharSequence value) {
    this.provincialSalesTax = value;
  }

  /**
   * Gets the value of the 'totalTax' field.
   * @return The value of the 'totalTax' field.
   */
  public CharSequence getTotalTax() {
    return totalTax;
  }

  /**
   * Sets the value of the 'totalTax' field.
   * @param value the value to set.
   */
  public void setTotalTax(CharSequence value) {
    this.totalTax = value;
  }

  /**
   * Creates a new ReservationPricingTaxesAvro RecordBuilder.
   * @return A new ReservationPricingTaxesAvro RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new ReservationPricingTaxesAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ReservationPricingTaxesAvro RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new ReservationPricingTaxesAvro RecordBuilder by copying an existing ReservationPricingTaxesAvro instance.
   * @param other The existing instance to copy.
   * @return A new ReservationPricingTaxesAvro RecordBuilder
   */
  public static Builder newBuilder(ReservationPricingTaxesAvro other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for ReservationPricingTaxesAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ReservationPricingTaxesAvro>
    implements org.apache.avro.data.RecordBuilder<ReservationPricingTaxesAvro> {

    private CharSequence goodsAndServicesTax;
    private CharSequence harmonizedSalesTax;
    private CharSequence provincialSalesTax;
    private CharSequence totalTax;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.goodsAndServicesTax)) {
        this.goodsAndServicesTax = data().deepCopy(fields()[0].schema(), other.goodsAndServicesTax);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.harmonizedSalesTax)) {
        this.harmonizedSalesTax = data().deepCopy(fields()[1].schema(), other.harmonizedSalesTax);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.provincialSalesTax)) {
        this.provincialSalesTax = data().deepCopy(fields()[2].schema(), other.provincialSalesTax);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.totalTax)) {
        this.totalTax = data().deepCopy(fields()[3].schema(), other.totalTax);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ReservationPricingTaxesAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(ReservationPricingTaxesAvro other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.goodsAndServicesTax)) {
        this.goodsAndServicesTax = data().deepCopy(fields()[0].schema(), other.goodsAndServicesTax);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.harmonizedSalesTax)) {
        this.harmonizedSalesTax = data().deepCopy(fields()[1].schema(), other.harmonizedSalesTax);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.provincialSalesTax)) {
        this.provincialSalesTax = data().deepCopy(fields()[2].schema(), other.provincialSalesTax);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.totalTax)) {
        this.totalTax = data().deepCopy(fields()[3].schema(), other.totalTax);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'goodsAndServicesTax' field.
      * @return The value.
      */
    public CharSequence getGoodsAndServicesTax() {
      return goodsAndServicesTax;
    }

    /**
      * Sets the value of the 'goodsAndServicesTax' field.
      * @param value The value of 'goodsAndServicesTax'.
      * @return This builder.
      */
    public Builder setGoodsAndServicesTax(CharSequence value) {
      validate(fields()[0], value);
      this.goodsAndServicesTax = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'goodsAndServicesTax' field has been set.
      * @return True if the 'goodsAndServicesTax' field has been set, false otherwise.
      */
    public boolean hasGoodsAndServicesTax() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'goodsAndServicesTax' field.
      * @return This builder.
      */
    public Builder clearGoodsAndServicesTax() {
      goodsAndServicesTax = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'harmonizedSalesTax' field.
      * @return The value.
      */
    public CharSequence getHarmonizedSalesTax() {
      return harmonizedSalesTax;
    }

    /**
      * Sets the value of the 'harmonizedSalesTax' field.
      * @param value The value of 'harmonizedSalesTax'.
      * @return This builder.
      */
    public Builder setHarmonizedSalesTax(CharSequence value) {
      validate(fields()[1], value);
      this.harmonizedSalesTax = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'harmonizedSalesTax' field has been set.
      * @return True if the 'harmonizedSalesTax' field has been set, false otherwise.
      */
    public boolean hasHarmonizedSalesTax() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'harmonizedSalesTax' field.
      * @return This builder.
      */
    public Builder clearHarmonizedSalesTax() {
      harmonizedSalesTax = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'provincialSalesTax' field.
      * @return The value.
      */
    public CharSequence getProvincialSalesTax() {
      return provincialSalesTax;
    }

    /**
      * Sets the value of the 'provincialSalesTax' field.
      * @param value The value of 'provincialSalesTax'.
      * @return This builder.
      */
    public Builder setProvincialSalesTax(CharSequence value) {
      validate(fields()[2], value);
      this.provincialSalesTax = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'provincialSalesTax' field has been set.
      * @return True if the 'provincialSalesTax' field has been set, false otherwise.
      */
    public boolean hasProvincialSalesTax() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'provincialSalesTax' field.
      * @return This builder.
      */
    public Builder clearProvincialSalesTax() {
      provincialSalesTax = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalTax' field.
      * @return The value.
      */
    public CharSequence getTotalTax() {
      return totalTax;
    }

    /**
      * Sets the value of the 'totalTax' field.
      * @param value The value of 'totalTax'.
      * @return This builder.
      */
    public Builder setTotalTax(CharSequence value) {
      validate(fields()[3], value);
      this.totalTax = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'totalTax' field has been set.
      * @return True if the 'totalTax' field has been set, false otherwise.
      */
    public boolean hasTotalTax() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'totalTax' field.
      * @return This builder.
      */
    public Builder clearTotalTax() {
      totalTax = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ReservationPricingTaxesAvro build() {
      try {
        ReservationPricingTaxesAvro record = new ReservationPricingTaxesAvro();
        record.goodsAndServicesTax = fieldSetFlags()[0] ? this.goodsAndServicesTax : (CharSequence) defaultValue(fields()[0]);
        record.harmonizedSalesTax = fieldSetFlags()[1] ? this.harmonizedSalesTax : (CharSequence) defaultValue(fields()[1]);
        record.provincialSalesTax = fieldSetFlags()[2] ? this.provincialSalesTax : (CharSequence) defaultValue(fields()[2]);
        record.totalTax = fieldSetFlags()[3] ? this.totalTax : (CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ReservationPricingTaxesAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<ReservationPricingTaxesAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ReservationPricingTaxesAvro>
    READER$ = (org.apache.avro.io.DatumReader<ReservationPricingTaxesAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
