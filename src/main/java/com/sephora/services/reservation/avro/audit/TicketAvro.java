/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.sephora.services.reservation.avro.audit;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TicketAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5933556438770338764L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TicketAvro\",\"namespace\":\"com.sephora.services.reservation.avro.audit\",\"fields\":[{\"name\":\"ticketId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"ticketStatus\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"client\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ClientAvro\",\"fields\":[{\"name\":\"beautyInsiderId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"customerProfileId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"firstName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lastName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"email\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"phone\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"timeZone\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null},{\"name\":\"serviceDetails\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ServiceDetailsAvro\",\"fields\":[{\"name\":\"activityType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"storeBaId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"isBaChosenByClient\",\"type\":\"boolean\",\"default\":false},{\"name\":\"activityId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"storeId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"skuId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"startDateTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"cancelChargeHours\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"eventType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"tipIncluded\",\"type\":\"boolean\",\"default\":false},{\"name\":\"tipAmount\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"orderXrefId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null},{\"name\":\"brandRequest\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"BrandRequestAvro\",\"fields\":[{\"name\":\"brandId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"brandName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"requestHeadCount\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"brandRepFirstName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"brandRepLastName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"brandRepEmail\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"brandRepPhone\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null},{\"name\":\"bookingXrefId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"bookingDateTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"cancelDateTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"confirmationId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"bookingType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"noShowTimestamp\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TicketAvro> ENCODER =
      new BinaryMessageEncoder<TicketAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TicketAvro> DECODER =
      new BinaryMessageDecoder<TicketAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TicketAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TicketAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TicketAvro>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TicketAvro to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TicketAvro from a ByteBuffer. */
  public static TicketAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public CharSequence ticketId;
  @Deprecated public CharSequence ticketStatus;
  @Deprecated public ClientAvro client;
  @Deprecated public ServiceDetailsAvro serviceDetails;
  @Deprecated public BrandRequestAvro brandRequest;
  @Deprecated public CharSequence bookingXrefId;
  @Deprecated public CharSequence bookingDateTime;
  @Deprecated public CharSequence cancelDateTime;
  @Deprecated public CharSequence confirmationId;
  @Deprecated public CharSequence bookingType;
  @Deprecated public CharSequence noShowTimestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TicketAvro() {}

  /**
   * All-args constructor.
   * @param ticketId The new value for ticketId
   * @param ticketStatus The new value for ticketStatus
   * @param client The new value for client
   * @param serviceDetails The new value for serviceDetails
   * @param brandRequest The new value for brandRequest
   * @param bookingXrefId The new value for bookingXrefId
   * @param bookingDateTime The new value for bookingDateTime
   * @param cancelDateTime The new value for cancelDateTime
   * @param confirmationId The new value for confirmationId
   * @param bookingType The new value for bookingType
   * @param noShowTimestamp The new value for noShowTimestamp
   */
  public TicketAvro(CharSequence ticketId, CharSequence ticketStatus, ClientAvro client, ServiceDetailsAvro serviceDetails, BrandRequestAvro brandRequest, CharSequence bookingXrefId, CharSequence bookingDateTime, CharSequence cancelDateTime, CharSequence confirmationId, CharSequence bookingType, CharSequence noShowTimestamp) {
    this.ticketId = ticketId;
    this.ticketStatus = ticketStatus;
    this.client = client;
    this.serviceDetails = serviceDetails;
    this.brandRequest = brandRequest;
    this.bookingXrefId = bookingXrefId;
    this.bookingDateTime = bookingDateTime;
    this.cancelDateTime = cancelDateTime;
    this.confirmationId = confirmationId;
    this.bookingType = bookingType;
    this.noShowTimestamp = noShowTimestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return ticketId;
    case 1: return ticketStatus;
    case 2: return client;
    case 3: return serviceDetails;
    case 4: return brandRequest;
    case 5: return bookingXrefId;
    case 6: return bookingDateTime;
    case 7: return cancelDateTime;
    case 8: return confirmationId;
    case 9: return bookingType;
    case 10: return noShowTimestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: ticketId = (CharSequence)value$; break;
    case 1: ticketStatus = (CharSequence)value$; break;
    case 2: client = (ClientAvro)value$; break;
    case 3: serviceDetails = (ServiceDetailsAvro)value$; break;
    case 4: brandRequest = (BrandRequestAvro)value$; break;
    case 5: bookingXrefId = (CharSequence)value$; break;
    case 6: bookingDateTime = (CharSequence)value$; break;
    case 7: cancelDateTime = (CharSequence)value$; break;
    case 8: confirmationId = (CharSequence)value$; break;
    case 9: bookingType = (CharSequence)value$; break;
    case 10: noShowTimestamp = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ticketId' field.
   * @return The value of the 'ticketId' field.
   */
  public CharSequence getTicketId() {
    return ticketId;
  }

  /**
   * Sets the value of the 'ticketId' field.
   * @param value the value to set.
   */
  public void setTicketId(CharSequence value) {
    this.ticketId = value;
  }

  /**
   * Gets the value of the 'ticketStatus' field.
   * @return The value of the 'ticketStatus' field.
   */
  public CharSequence getTicketStatus() {
    return ticketStatus;
  }

  /**
   * Sets the value of the 'ticketStatus' field.
   * @param value the value to set.
   */
  public void setTicketStatus(CharSequence value) {
    this.ticketStatus = value;
  }

  /**
   * Gets the value of the 'client' field.
   * @return The value of the 'client' field.
   */
  public ClientAvro getClient() {
    return client;
  }

  /**
   * Sets the value of the 'client' field.
   * @param value the value to set.
   */
  public void setClient(ClientAvro value) {
    this.client = value;
  }

  /**
   * Gets the value of the 'serviceDetails' field.
   * @return The value of the 'serviceDetails' field.
   */
  public ServiceDetailsAvro getServiceDetails() {
    return serviceDetails;
  }

  /**
   * Sets the value of the 'serviceDetails' field.
   * @param value the value to set.
   */
  public void setServiceDetails(ServiceDetailsAvro value) {
    this.serviceDetails = value;
  }

  /**
   * Gets the value of the 'brandRequest' field.
   * @return The value of the 'brandRequest' field.
   */
  public BrandRequestAvro getBrandRequest() {
    return brandRequest;
  }

  /**
   * Sets the value of the 'brandRequest' field.
   * @param value the value to set.
   */
  public void setBrandRequest(BrandRequestAvro value) {
    this.brandRequest = value;
  }

  /**
   * Gets the value of the 'bookingXrefId' field.
   * @return The value of the 'bookingXrefId' field.
   */
  public CharSequence getBookingXrefId() {
    return bookingXrefId;
  }

  /**
   * Sets the value of the 'bookingXrefId' field.
   * @param value the value to set.
   */
  public void setBookingXrefId(CharSequence value) {
    this.bookingXrefId = value;
  }

  /**
   * Gets the value of the 'bookingDateTime' field.
   * @return The value of the 'bookingDateTime' field.
   */
  public CharSequence getBookingDateTime() {
    return bookingDateTime;
  }

  /**
   * Sets the value of the 'bookingDateTime' field.
   * @param value the value to set.
   */
  public void setBookingDateTime(CharSequence value) {
    this.bookingDateTime = value;
  }

  /**
   * Gets the value of the 'cancelDateTime' field.
   * @return The value of the 'cancelDateTime' field.
   */
  public CharSequence getCancelDateTime() {
    return cancelDateTime;
  }

  /**
   * Sets the value of the 'cancelDateTime' field.
   * @param value the value to set.
   */
  public void setCancelDateTime(CharSequence value) {
    this.cancelDateTime = value;
  }

  /**
   * Gets the value of the 'confirmationId' field.
   * @return The value of the 'confirmationId' field.
   */
  public CharSequence getConfirmationId() {
    return confirmationId;
  }

  /**
   * Sets the value of the 'confirmationId' field.
   * @param value the value to set.
   */
  public void setConfirmationId(CharSequence value) {
    this.confirmationId = value;
  }

  /**
   * Gets the value of the 'bookingType' field.
   * @return The value of the 'bookingType' field.
   */
  public CharSequence getBookingType() {
    return bookingType;
  }

  /**
   * Sets the value of the 'bookingType' field.
   * @param value the value to set.
   */
  public void setBookingType(CharSequence value) {
    this.bookingType = value;
  }

  /**
   * Gets the value of the 'noShowTimestamp' field.
   * @return The value of the 'noShowTimestamp' field.
   */
  public CharSequence getNoShowTimestamp() {
    return noShowTimestamp;
  }

  /**
   * Sets the value of the 'noShowTimestamp' field.
   * @param value the value to set.
   */
  public void setNoShowTimestamp(CharSequence value) {
    this.noShowTimestamp = value;
  }

  /**
   * Creates a new TicketAvro RecordBuilder.
   * @return A new TicketAvro RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new TicketAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TicketAvro RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new TicketAvro RecordBuilder by copying an existing TicketAvro instance.
   * @param other The existing instance to copy.
   * @return A new TicketAvro RecordBuilder
   */
  public static Builder newBuilder(TicketAvro other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for TicketAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TicketAvro>
    implements org.apache.avro.data.RecordBuilder<TicketAvro> {

    private CharSequence ticketId;
    private CharSequence ticketStatus;
    private ClientAvro client;
    private ClientAvro.Builder clientBuilder;
    private ServiceDetailsAvro serviceDetails;
    private ServiceDetailsAvro.Builder serviceDetailsBuilder;
    private BrandRequestAvro brandRequest;
    private BrandRequestAvro.Builder brandRequestBuilder;
    private CharSequence bookingXrefId;
    private CharSequence bookingDateTime;
    private CharSequence cancelDateTime;
    private CharSequence confirmationId;
    private CharSequence bookingType;
    private CharSequence noShowTimestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ticketId)) {
        this.ticketId = data().deepCopy(fields()[0].schema(), other.ticketId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ticketStatus)) {
        this.ticketStatus = data().deepCopy(fields()[1].schema(), other.ticketStatus);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.client)) {
        this.client = data().deepCopy(fields()[2].schema(), other.client);
        fieldSetFlags()[2] = true;
      }
      if (other.hasClientBuilder()) {
        this.clientBuilder = ClientAvro.newBuilder(other.getClientBuilder());
      }
      if (isValidValue(fields()[3], other.serviceDetails)) {
        this.serviceDetails = data().deepCopy(fields()[3].schema(), other.serviceDetails);
        fieldSetFlags()[3] = true;
      }
      if (other.hasServiceDetailsBuilder()) {
        this.serviceDetailsBuilder = ServiceDetailsAvro.newBuilder(other.getServiceDetailsBuilder());
      }
      if (isValidValue(fields()[4], other.brandRequest)) {
        this.brandRequest = data().deepCopy(fields()[4].schema(), other.brandRequest);
        fieldSetFlags()[4] = true;
      }
      if (other.hasBrandRequestBuilder()) {
        this.brandRequestBuilder = BrandRequestAvro.newBuilder(other.getBrandRequestBuilder());
      }
      if (isValidValue(fields()[5], other.bookingXrefId)) {
        this.bookingXrefId = data().deepCopy(fields()[5].schema(), other.bookingXrefId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.bookingDateTime)) {
        this.bookingDateTime = data().deepCopy(fields()[6].schema(), other.bookingDateTime);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.cancelDateTime)) {
        this.cancelDateTime = data().deepCopy(fields()[7].schema(), other.cancelDateTime);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.confirmationId)) {
        this.confirmationId = data().deepCopy(fields()[8].schema(), other.confirmationId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.bookingType)) {
        this.bookingType = data().deepCopy(fields()[9].schema(), other.bookingType);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.noShowTimestamp)) {
        this.noShowTimestamp = data().deepCopy(fields()[10].schema(), other.noShowTimestamp);
        fieldSetFlags()[10] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TicketAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(TicketAvro other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.ticketId)) {
        this.ticketId = data().deepCopy(fields()[0].schema(), other.ticketId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ticketStatus)) {
        this.ticketStatus = data().deepCopy(fields()[1].schema(), other.ticketStatus);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.client)) {
        this.client = data().deepCopy(fields()[2].schema(), other.client);
        fieldSetFlags()[2] = true;
      }
      this.clientBuilder = null;
      if (isValidValue(fields()[3], other.serviceDetails)) {
        this.serviceDetails = data().deepCopy(fields()[3].schema(), other.serviceDetails);
        fieldSetFlags()[3] = true;
      }
      this.serviceDetailsBuilder = null;
      if (isValidValue(fields()[4], other.brandRequest)) {
        this.brandRequest = data().deepCopy(fields()[4].schema(), other.brandRequest);
        fieldSetFlags()[4] = true;
      }
      this.brandRequestBuilder = null;
      if (isValidValue(fields()[5], other.bookingXrefId)) {
        this.bookingXrefId = data().deepCopy(fields()[5].schema(), other.bookingXrefId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.bookingDateTime)) {
        this.bookingDateTime = data().deepCopy(fields()[6].schema(), other.bookingDateTime);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.cancelDateTime)) {
        this.cancelDateTime = data().deepCopy(fields()[7].schema(), other.cancelDateTime);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.confirmationId)) {
        this.confirmationId = data().deepCopy(fields()[8].schema(), other.confirmationId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.bookingType)) {
        this.bookingType = data().deepCopy(fields()[9].schema(), other.bookingType);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.noShowTimestamp)) {
        this.noShowTimestamp = data().deepCopy(fields()[10].schema(), other.noShowTimestamp);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'ticketId' field.
      * @return The value.
      */
    public CharSequence getTicketId() {
      return ticketId;
    }

    /**
      * Sets the value of the 'ticketId' field.
      * @param value The value of 'ticketId'.
      * @return This builder.
      */
    public Builder setTicketId(CharSequence value) {
      validate(fields()[0], value);
      this.ticketId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ticketId' field has been set.
      * @return True if the 'ticketId' field has been set, false otherwise.
      */
    public boolean hasTicketId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ticketId' field.
      * @return This builder.
      */
    public Builder clearTicketId() {
      ticketId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ticketStatus' field.
      * @return The value.
      */
    public CharSequence getTicketStatus() {
      return ticketStatus;
    }

    /**
      * Sets the value of the 'ticketStatus' field.
      * @param value The value of 'ticketStatus'.
      * @return This builder.
      */
    public Builder setTicketStatus(CharSequence value) {
      validate(fields()[1], value);
      this.ticketStatus = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ticketStatus' field has been set.
      * @return True if the 'ticketStatus' field has been set, false otherwise.
      */
    public boolean hasTicketStatus() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ticketStatus' field.
      * @return This builder.
      */
    public Builder clearTicketStatus() {
      ticketStatus = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'client' field.
      * @return The value.
      */
    public ClientAvro getClient() {
      return client;
    }

    /**
      * Sets the value of the 'client' field.
      * @param value The value of 'client'.
      * @return This builder.
      */
    public Builder setClient(ClientAvro value) {
      validate(fields()[2], value);
      this.clientBuilder = null;
      this.client = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'client' field has been set.
      * @return True if the 'client' field has been set, false otherwise.
      */
    public boolean hasClient() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'client' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public ClientAvro.Builder getClientBuilder() {
      if (clientBuilder == null) {
        if (hasClient()) {
          setClientBuilder(ClientAvro.newBuilder(client));
        } else {
          setClientBuilder(ClientAvro.newBuilder());
        }
      }
      return clientBuilder;
    }

    /**
     * Sets the Builder instance for the 'client' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setClientBuilder(ClientAvro.Builder value) {
      clearClient();
      clientBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'client' field has an active Builder instance
     * @return True if the 'client' field has an active Builder instance
     */
    public boolean hasClientBuilder() {
      return clientBuilder != null;
    }

    /**
      * Clears the value of the 'client' field.
      * @return This builder.
      */
    public Builder clearClient() {
      client = null;
      clientBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'serviceDetails' field.
      * @return The value.
      */
    public ServiceDetailsAvro getServiceDetails() {
      return serviceDetails;
    }

    /**
      * Sets the value of the 'serviceDetails' field.
      * @param value The value of 'serviceDetails'.
      * @return This builder.
      */
    public Builder setServiceDetails(ServiceDetailsAvro value) {
      validate(fields()[3], value);
      this.serviceDetailsBuilder = null;
      this.serviceDetails = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceDetails' field has been set.
      * @return True if the 'serviceDetails' field has been set, false otherwise.
      */
    public boolean hasServiceDetails() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'serviceDetails' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public ServiceDetailsAvro.Builder getServiceDetailsBuilder() {
      if (serviceDetailsBuilder == null) {
        if (hasServiceDetails()) {
          setServiceDetailsBuilder(ServiceDetailsAvro.newBuilder(serviceDetails));
        } else {
          setServiceDetailsBuilder(ServiceDetailsAvro.newBuilder());
        }
      }
      return serviceDetailsBuilder;
    }

    /**
     * Sets the Builder instance for the 'serviceDetails' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setServiceDetailsBuilder(ServiceDetailsAvro.Builder value) {
      clearServiceDetails();
      serviceDetailsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'serviceDetails' field has an active Builder instance
     * @return True if the 'serviceDetails' field has an active Builder instance
     */
    public boolean hasServiceDetailsBuilder() {
      return serviceDetailsBuilder != null;
    }

    /**
      * Clears the value of the 'serviceDetails' field.
      * @return This builder.
      */
    public Builder clearServiceDetails() {
      serviceDetails = null;
      serviceDetailsBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'brandRequest' field.
      * @return The value.
      */
    public BrandRequestAvro getBrandRequest() {
      return brandRequest;
    }

    /**
      * Sets the value of the 'brandRequest' field.
      * @param value The value of 'brandRequest'.
      * @return This builder.
      */
    public Builder setBrandRequest(BrandRequestAvro value) {
      validate(fields()[4], value);
      this.brandRequestBuilder = null;
      this.brandRequest = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'brandRequest' field has been set.
      * @return True if the 'brandRequest' field has been set, false otherwise.
      */
    public boolean hasBrandRequest() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'brandRequest' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public BrandRequestAvro.Builder getBrandRequestBuilder() {
      if (brandRequestBuilder == null) {
        if (hasBrandRequest()) {
          setBrandRequestBuilder(BrandRequestAvro.newBuilder(brandRequest));
        } else {
          setBrandRequestBuilder(BrandRequestAvro.newBuilder());
        }
      }
      return brandRequestBuilder;
    }

    /**
     * Sets the Builder instance for the 'brandRequest' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setBrandRequestBuilder(BrandRequestAvro.Builder value) {
      clearBrandRequest();
      brandRequestBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'brandRequest' field has an active Builder instance
     * @return True if the 'brandRequest' field has an active Builder instance
     */
    public boolean hasBrandRequestBuilder() {
      return brandRequestBuilder != null;
    }

    /**
      * Clears the value of the 'brandRequest' field.
      * @return This builder.
      */
    public Builder clearBrandRequest() {
      brandRequest = null;
      brandRequestBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'bookingXrefId' field.
      * @return The value.
      */
    public CharSequence getBookingXrefId() {
      return bookingXrefId;
    }

    /**
      * Sets the value of the 'bookingXrefId' field.
      * @param value The value of 'bookingXrefId'.
      * @return This builder.
      */
    public Builder setBookingXrefId(CharSequence value) {
      validate(fields()[5], value);
      this.bookingXrefId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'bookingXrefId' field has been set.
      * @return True if the 'bookingXrefId' field has been set, false otherwise.
      */
    public boolean hasBookingXrefId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'bookingXrefId' field.
      * @return This builder.
      */
    public Builder clearBookingXrefId() {
      bookingXrefId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'bookingDateTime' field.
      * @return The value.
      */
    public CharSequence getBookingDateTime() {
      return bookingDateTime;
    }

    /**
      * Sets the value of the 'bookingDateTime' field.
      * @param value The value of 'bookingDateTime'.
      * @return This builder.
      */
    public Builder setBookingDateTime(CharSequence value) {
      validate(fields()[6], value);
      this.bookingDateTime = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'bookingDateTime' field has been set.
      * @return True if the 'bookingDateTime' field has been set, false otherwise.
      */
    public boolean hasBookingDateTime() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'bookingDateTime' field.
      * @return This builder.
      */
    public Builder clearBookingDateTime() {
      bookingDateTime = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'cancelDateTime' field.
      * @return The value.
      */
    public CharSequence getCancelDateTime() {
      return cancelDateTime;
    }

    /**
      * Sets the value of the 'cancelDateTime' field.
      * @param value The value of 'cancelDateTime'.
      * @return This builder.
      */
    public Builder setCancelDateTime(CharSequence value) {
      validate(fields()[7], value);
      this.cancelDateTime = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'cancelDateTime' field has been set.
      * @return True if the 'cancelDateTime' field has been set, false otherwise.
      */
    public boolean hasCancelDateTime() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'cancelDateTime' field.
      * @return This builder.
      */
    public Builder clearCancelDateTime() {
      cancelDateTime = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'confirmationId' field.
      * @return The value.
      */
    public CharSequence getConfirmationId() {
      return confirmationId;
    }

    /**
      * Sets the value of the 'confirmationId' field.
      * @param value The value of 'confirmationId'.
      * @return This builder.
      */
    public Builder setConfirmationId(CharSequence value) {
      validate(fields()[8], value);
      this.confirmationId = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'confirmationId' field has been set.
      * @return True if the 'confirmationId' field has been set, false otherwise.
      */
    public boolean hasConfirmationId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'confirmationId' field.
      * @return This builder.
      */
    public Builder clearConfirmationId() {
      confirmationId = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'bookingType' field.
      * @return The value.
      */
    public CharSequence getBookingType() {
      return bookingType;
    }

    /**
      * Sets the value of the 'bookingType' field.
      * @param value The value of 'bookingType'.
      * @return This builder.
      */
    public Builder setBookingType(CharSequence value) {
      validate(fields()[9], value);
      this.bookingType = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'bookingType' field has been set.
      * @return True if the 'bookingType' field has been set, false otherwise.
      */
    public boolean hasBookingType() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'bookingType' field.
      * @return This builder.
      */
    public Builder clearBookingType() {
      bookingType = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'noShowTimestamp' field.
      * @return The value.
      */
    public CharSequence getNoShowTimestamp() {
      return noShowTimestamp;
    }

    /**
      * Sets the value of the 'noShowTimestamp' field.
      * @param value The value of 'noShowTimestamp'.
      * @return This builder.
      */
    public Builder setNoShowTimestamp(CharSequence value) {
      validate(fields()[10], value);
      this.noShowTimestamp = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'noShowTimestamp' field has been set.
      * @return True if the 'noShowTimestamp' field has been set, false otherwise.
      */
    public boolean hasNoShowTimestamp() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'noShowTimestamp' field.
      * @return This builder.
      */
    public Builder clearNoShowTimestamp() {
      noShowTimestamp = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TicketAvro build() {
      try {
        TicketAvro record = new TicketAvro();
        record.ticketId = fieldSetFlags()[0] ? this.ticketId : (CharSequence) defaultValue(fields()[0]);
        record.ticketStatus = fieldSetFlags()[1] ? this.ticketStatus : (CharSequence) defaultValue(fields()[1]);
        if (clientBuilder != null) {
          record.client = this.clientBuilder.build();
        } else {
          record.client = fieldSetFlags()[2] ? this.client : (ClientAvro) defaultValue(fields()[2]);
        }
        if (serviceDetailsBuilder != null) {
          record.serviceDetails = this.serviceDetailsBuilder.build();
        } else {
          record.serviceDetails = fieldSetFlags()[3] ? this.serviceDetails : (ServiceDetailsAvro) defaultValue(fields()[3]);
        }
        if (brandRequestBuilder != null) {
          record.brandRequest = this.brandRequestBuilder.build();
        } else {
          record.brandRequest = fieldSetFlags()[4] ? this.brandRequest : (BrandRequestAvro) defaultValue(fields()[4]);
        }
        record.bookingXrefId = fieldSetFlags()[5] ? this.bookingXrefId : (CharSequence) defaultValue(fields()[5]);
        record.bookingDateTime = fieldSetFlags()[6] ? this.bookingDateTime : (CharSequence) defaultValue(fields()[6]);
        record.cancelDateTime = fieldSetFlags()[7] ? this.cancelDateTime : (CharSequence) defaultValue(fields()[7]);
        record.confirmationId = fieldSetFlags()[8] ? this.confirmationId : (CharSequence) defaultValue(fields()[8]);
        record.bookingType = fieldSetFlags()[9] ? this.bookingType : (CharSequence) defaultValue(fields()[9]);
        record.noShowTimestamp = fieldSetFlags()[10] ? this.noShowTimestamp : (CharSequence) defaultValue(fields()[10]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TicketAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<TicketAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TicketAvro>
    READER$ = (org.apache.avro.io.DatumReader<TicketAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
